// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/base/reflection/v1beta1/descriptor.proto

package reflection

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AppDescriptor describes a cosmos sdk application
// in a way that it's possible for an external client
// to build the required components (codec, address encoding..)
// to query and send transactions to the described application.
type AppDescriptor struct {
	// Codec describes the codec information regarding interface types and relative implementers
	// it's required to provide type safety during marshalling and unmarshalling of anypb.Any types in a dynamic context.
	Codec *Codec `protobuf:"bytes,1,opt,name=codec,proto3" json:"codec,omitempty"`
	// Config describes the sdk.Config of the application
	Config *Config `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// QueryServices provides a list of the exposed gRPC query services of modules
	QueryServices []*QueryService `protobuf:"bytes,3,rep,name=query_services,json=queryServices,proto3" json:"query_services,omitempty"`
	// Messages provides a list of the messages that can be delivered to the application
	Messages []*Message `protobuf:"bytes,4,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *AppDescriptor) Reset()         { *m = AppDescriptor{} }
func (m *AppDescriptor) String() string { return proto.CompactTextString(m) }
func (*AppDescriptor) ProtoMessage()    {}
func (*AppDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b3a3be5019055be, []int{0}
}
func (m *AppDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppDescriptor.Merge(m, src)
}
func (m *AppDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *AppDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_AppDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_AppDescriptor proto.InternalMessageInfo

func (m *AppDescriptor) GetCodec() *Codec {
	if m != nil {
		return m.Codec
	}
	return nil
}

func (m *AppDescriptor) GetConfig() *Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *AppDescriptor) GetQueryServices() []*QueryService {
	if m != nil {
		return m.QueryServices
	}
	return nil
}

func (m *AppDescriptor) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

// Codec describes the application's codec
type Codec struct {
	// interfaces_descriptors lists the registered interfaces descriptors
	InterfacesDescriptors []*InterfaceDescriptor `protobuf:"bytes,1,rep,name=interfaces_descriptors,json=interfacesDescriptors,proto3" json:"interfaces_descriptors,omitempty"`
}

func (m *Codec) Reset()         { *m = Codec{} }
func (m *Codec) String() string { return proto.CompactTextString(m) }
func (*Codec) ProtoMessage()    {}
func (*Codec) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b3a3be5019055be, []int{1}
}
func (m *Codec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Codec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Codec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Codec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Codec.Merge(m, src)
}
func (m *Codec) XXX_Size() int {
	return m.Size()
}
func (m *Codec) XXX_DiscardUnknown() {
	xxx_messageInfo_Codec.DiscardUnknown(m)
}

var xxx_messageInfo_Codec proto.InternalMessageInfo

func (m *Codec) GetInterfacesDescriptors() []*InterfaceDescriptor {
	if m != nil {
		return m.InterfacesDescriptors
	}
	return nil
}

// InterfaceDescriptor describes an interface
type InterfaceDescriptor struct {
	// name is the name of the interface
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// interface_implementers describes the interface implementers
	InterfaceImplementers []*InterfaceImplementer `protobuf:"bytes,2,rep,name=interface_implementers,json=interfaceImplementers,proto3" json:"interface_implementers,omitempty"`
}

func (m *InterfaceDescriptor) Reset()         { *m = InterfaceDescriptor{} }
func (m *InterfaceDescriptor) String() string { return proto.CompactTextString(m) }
func (*InterfaceDescriptor) ProtoMessage()    {}
func (*InterfaceDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b3a3be5019055be, []int{2}
}
func (m *InterfaceDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfaceDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfaceDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfaceDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceDescriptor.Merge(m, src)
}
func (m *InterfaceDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *InterfaceDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceDescriptor proto.InternalMessageInfo

func (m *InterfaceDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InterfaceDescriptor) GetInterfaceImplementers() []*InterfaceImplementer {
	if m != nil {
		return m.InterfaceImplementers
	}
	return nil
}

// InterfaceImplementer describes a type implementing an interface
type InterfaceImplementer struct {
	// full_name defines the concrete type's protobuf full name, package included.
	FullName string `protobuf:"bytes,1,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
}

func (m *InterfaceImplementer) Reset()         { *m = InterfaceImplementer{} }
func (m *InterfaceImplementer) String() string { return proto.CompactTextString(m) }
func (*InterfaceImplementer) ProtoMessage()    {}
func (*InterfaceImplementer) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b3a3be5019055be, []int{3}
}
func (m *InterfaceImplementer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfaceImplementer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfaceImplementer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfaceImplementer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceImplementer.Merge(m, src)
}
func (m *InterfaceImplementer) XXX_Size() int {
	return m.Size()
}
func (m *InterfaceImplementer) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceImplementer.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceImplementer proto.InternalMessageInfo

func (m *InterfaceImplementer) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

// Config describes the application's sdk.Config
type Config struct {
	// bech32_acc_address_prefix defines the account address prefix
	Bech32AccAddressPrefix string `protobuf:"bytes,1,opt,name=bech32_acc_address_prefix,json=bech32AccAddressPrefix,proto3" json:"bech32_acc_address_prefix,omitempty"`
	// bech32_acc_pub_prefix defines the prefix of an account's public key
	Bech32AccPubPrefix string `protobuf:"bytes,2,opt,name=bech32_acc_pub_prefix,json=bech32AccPubPrefix,proto3" json:"bech32_acc_pub_prefix,omitempty"`
	// bech32_val_addr_prefix defines the bech32 prefix of a validator's operator address
	Bech32ValAddrPrefix string `protobuf:"bytes,3,opt,name=bech32_val_addr_prefix,json=bech32ValAddrPrefix,proto3" json:"bech32_val_addr_prefix,omitempty"`
	// bech32_val_pub_prefix defines the bech32 prefix of validator's operator public key
	Bech32ValPubPrefix string `protobuf:"bytes,4,opt,name=bech32_val_pub_prefix,json=bech32ValPubPrefix,proto3" json:"bech32_val_pub_prefix,omitempty"`
	// bech32_cons_addr_prefix defines the bech32 prefix of a consensus node address
	Bech32ConsAddrPrefix string `protobuf:"bytes,5,opt,name=bech32_cons_addr_prefix,json=bech32ConsAddrPrefix,proto3" json:"bech32_cons_addr_prefix,omitempty"`
	// bech32_cons_pub_prefix defines the bech32 prefix of a consensus node public key
	Bech32ConsPubPrefix string `protobuf:"bytes,6,opt,name=bech32_cons_pub_prefix,json=bech32ConsPubPrefix,proto3" json:"bech32_cons_pub_prefix,omitempty"`
	// purpose is the purpose as defined in SLIP44
	Purpose uint32 `protobuf:"varint,7,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// coin_type returns the coin type as defined in SLIP44
	CoinType uint32 `protobuf:"varint,8,opt,name=coin_type,json=coinType,proto3" json:"coin_type,omitempty"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b3a3be5019055be, []int{4}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetBech32AccAddressPrefix() string {
	if m != nil {
		return m.Bech32AccAddressPrefix
	}
	return ""
}

func (m *Config) GetBech32AccPubPrefix() string {
	if m != nil {
		return m.Bech32AccPubPrefix
	}
	return ""
}

func (m *Config) GetBech32ValAddrPrefix() string {
	if m != nil {
		return m.Bech32ValAddrPrefix
	}
	return ""
}

func (m *Config) GetBech32ValPubPrefix() string {
	if m != nil {
		return m.Bech32ValPubPrefix
	}
	return ""
}

func (m *Config) GetBech32ConsAddrPrefix() string {
	if m != nil {
		return m.Bech32ConsAddrPrefix
	}
	return ""
}

func (m *Config) GetBech32ConsPubPrefix() string {
	if m != nil {
		return m.Bech32ConsPubPrefix
	}
	return ""
}

func (m *Config) GetPurpose() uint32 {
	if m != nil {
		return m.Purpose
	}
	return 0
}

func (m *Config) GetCoinType() uint32 {
	if m != nil {
		return m.CoinType
	}
	return 0
}

// QueryService describes a query service
type QueryService struct {
	// full_name is the full name of the query service, package included.
	FullName string `protobuf:"bytes,1,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
}

func (m *QueryService) Reset()         { *m = QueryService{} }
func (m *QueryService) String() string { return proto.CompactTextString(m) }
func (*QueryService) ProtoMessage()    {}
func (*QueryService) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b3a3be5019055be, []int{5}
}
func (m *QueryService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryService.Merge(m, src)
}
func (m *QueryService) XXX_Size() int {
	return m.Size()
}
func (m *QueryService) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryService.DiscardUnknown(m)
}

var xxx_messageInfo_QueryService proto.InternalMessageInfo

func (m *QueryService) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

// Message describes a cosmos-sdk deliverable message
// it can be of type sdk.Msg or type sdk.ServiceMsg
type Message struct {
	// message is gonna return either one type of Msg or ServiceMsg
	//
	// Types that are valid to be assigned to Message:
	//	*Message_Msg
	//	*Message_ServiceMsg
	Message isMessage_Message `protobuf_oneof:"message"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b3a3be5019055be, []int{6}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Message interface {
	isMessage_Message()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_Msg struct {
	Msg *Msg `protobuf:"bytes,1,opt,name=msg,proto3,oneof" json:"msg,omitempty"`
}
type Message_ServiceMsg struct {
	ServiceMsg *ServiceMsg `protobuf:"bytes,2,opt,name=service_msg,json=serviceMsg,proto3,oneof" json:"service_msg,omitempty"`
}

func (*Message_Msg) isMessage_Message()        {}
func (*Message_ServiceMsg) isMessage_Message() {}

func (m *Message) GetMessage() isMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Message) GetMsg() *Msg {
	if x, ok := m.GetMessage().(*Message_Msg); ok {
		return x.Msg
	}
	return nil
}

func (m *Message) GetServiceMsg() *ServiceMsg {
	if x, ok := m.GetMessage().(*Message_ServiceMsg); ok {
		return x.ServiceMsg
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_Msg)(nil),
		(*Message_ServiceMsg)(nil),
	}
}

// Msg describes an sdk.Msg
type Msg struct {
	// full_name defines the protobuf full name of the Msg, package included.
	FullName string `protobuf:"bytes,1,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b3a3be5019055be, []int{7}
}
func (m *Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return m.Size()
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

func (m *Msg) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

// ServiceMsg describes an sdk.ServiceMsg
type ServiceMsg struct {
	// full_name defines the protobuf full name of the ServiceMsg, package included.
	FullName string `protobuf:"bytes,1,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	// method_name defines the service msg's method name
	MethodName string `protobuf:"bytes,2,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
}

func (m *ServiceMsg) Reset()         { *m = ServiceMsg{} }
func (m *ServiceMsg) String() string { return proto.CompactTextString(m) }
func (*ServiceMsg) ProtoMessage()    {}
func (*ServiceMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b3a3be5019055be, []int{8}
}
func (m *ServiceMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceMsg.Merge(m, src)
}
func (m *ServiceMsg) XXX_Size() int {
	return m.Size()
}
func (m *ServiceMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceMsg proto.InternalMessageInfo

func (m *ServiceMsg) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *ServiceMsg) GetMethodName() string {
	if m != nil {
		return m.MethodName
	}
	return ""
}

func init() {
	proto.RegisterType((*AppDescriptor)(nil), "cosmos.base.reflection.v1beta1.AppDescriptor")
	proto.RegisterType((*Codec)(nil), "cosmos.base.reflection.v1beta1.Codec")
	proto.RegisterType((*InterfaceDescriptor)(nil), "cosmos.base.reflection.v1beta1.InterfaceDescriptor")
	proto.RegisterType((*InterfaceImplementer)(nil), "cosmos.base.reflection.v1beta1.InterfaceImplementer")
	proto.RegisterType((*Config)(nil), "cosmos.base.reflection.v1beta1.Config")
	proto.RegisterType((*QueryService)(nil), "cosmos.base.reflection.v1beta1.QueryService")
	proto.RegisterType((*Message)(nil), "cosmos.base.reflection.v1beta1.Message")
	proto.RegisterType((*Msg)(nil), "cosmos.base.reflection.v1beta1.Msg")
	proto.RegisterType((*ServiceMsg)(nil), "cosmos.base.reflection.v1beta1.ServiceMsg")
}

func init() {
	proto.RegisterFile("cosmos/base/reflection/v1beta1/descriptor.proto", fileDescriptor_5b3a3be5019055be)
}

var fileDescriptor_5b3a3be5019055be = []byte{
	// 641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xc7, 0xe3, 0xa4, 0x4d, 0xd2, 0xc9, 0xd3, 0xe7, 0xb0, 0x7d, 0xc1, 0x08, 0xc9, 0x54, 0x46,
	0x40, 0xc5, 0x8b, 0xad, 0x36, 0x20, 0x84, 0x90, 0x90, 0xda, 0x72, 0xa0, 0x48, 0x41, 0xc5, 0x45,
	0x3d, 0x70, 0xb1, 0xec, 0xcd, 0xc6, 0x35, 0xb5, 0xbd, 0xae, 0xc7, 0xa9, 0xe8, 0x91, 0x6f, 0xc0,
	0x89, 0x13, 0x67, 0x3e, 0x0b, 0xc7, 0x1e, 0x39, 0xa2, 0xf6, 0x8b, 0xa0, 0xdd, 0x75, 0xe2, 0x45,
	0x54, 0x09, 0xa7, 0x64, 0x67, 0xe6, 0xf7, 0xff, 0x8f, 0xbd, 0x9e, 0x01, 0x97, 0x72, 0x4c, 0x39,
	0xba, 0x61, 0x80, 0xcc, 0x2d, 0xd8, 0x28, 0x61, 0xb4, 0x8c, 0x79, 0xe6, 0x9e, 0x6d, 0x85, 0xac,
	0x0c, 0xb6, 0xdc, 0x21, 0x43, 0x5a, 0xc4, 0x79, 0xc9, 0x0b, 0x27, 0x2f, 0x78, 0xc9, 0x89, 0xa5,
	0x00, 0x47, 0x00, 0x4e, 0x0d, 0x38, 0x15, 0x60, 0x7f, 0x6f, 0xc2, 0xf2, 0x4e, 0x9e, 0xbf, 0x9a,
	0x72, 0xe4, 0x05, 0x2c, 0x52, 0x3e, 0x64, 0xd4, 0x34, 0x36, 0x8c, 0xcd, 0xde, 0xf6, 0x5d, 0x67,
	0xb6, 0x82, 0xb3, 0x27, 0x8a, 0x3d, 0xc5, 0x90, 0x97, 0xd0, 0xa6, 0x3c, 0x1b, 0xc5, 0x91, 0xd9,
	0x94, 0xf4, 0xbd, 0xf9, 0xb4, 0xa8, 0xf6, 0x2a, 0x8a, 0x1c, 0xc2, 0xff, 0xa7, 0x63, 0x56, 0x9c,
	0xfb, 0xc8, 0x8a, 0xb3, 0x98, 0x32, 0x34, 0x5b, 0x1b, 0xad, 0xcd, 0xde, 0xf6, 0xa3, 0x79, 0x3a,
	0xef, 0x04, 0x75, 0xa8, 0x20, 0x6f, 0xf9, 0x54, 0x3b, 0x21, 0xd9, 0x83, 0x6e, 0xca, 0x10, 0x83,
	0x88, 0xa1, 0xb9, 0x20, 0xe5, 0xee, 0xcf, 0x93, 0x1b, 0xa8, 0x7a, 0x6f, 0x0a, 0xda, 0x08, 0x8b,
	0xf2, 0x49, 0xc9, 0x47, 0x58, 0x8f, 0xb3, 0x92, 0x15, 0xa3, 0x80, 0x32, 0xf4, 0xeb, 0x17, 0x8e,
	0xa6, 0x21, 0xb5, 0xfb, 0xf3, 0xb4, 0xf7, 0x27, 0x74, 0xfd, 0xd2, 0xbd, 0xb5, 0x5a, 0xb2, 0x8e,
	0xa2, 0xfd, 0xd5, 0x80, 0x95, 0x6b, 0xca, 0x09, 0x81, 0x85, 0x2c, 0x48, 0x99, 0xbc, 0xa2, 0x25,
	0x4f, 0xfe, 0x27, 0x27, 0x5a, 0x5f, 0x7e, 0x9c, 0xe6, 0x09, 0x4b, 0x99, 0x38, 0xa3, 0xd9, 0x94,
	0x7d, 0x3d, 0xf9, 0xe7, 0xbe, 0xf6, 0x6b, 0x58, 0x6b, 0x4c, 0x8b, 0xa2, 0xdd, 0x87, 0xd5, 0xeb,
	0xca, 0xc9, 0x2d, 0x58, 0x1a, 0x8d, 0x93, 0xc4, 0xd7, 0xba, 0xeb, 0x8a, 0xc0, 0xdb, 0x20, 0x65,
	0xf6, 0xe7, 0x16, 0xb4, 0xd5, 0x7d, 0x93, 0xe7, 0x70, 0x33, 0x64, 0xf4, 0xb8, 0xbf, 0xed, 0x07,
	0x94, 0xfa, 0xc1, 0x70, 0x58, 0x30, 0x44, 0x3f, 0x2f, 0xd8, 0x28, 0xfe, 0x54, 0x71, 0xeb, 0xaa,
	0x60, 0x87, 0xd2, 0x1d, 0x95, 0x3e, 0x90, 0x59, 0xb2, 0x05, 0x6b, 0x1a, 0x9a, 0x8f, 0xc3, 0x09,
	0xd6, 0x94, 0x18, 0x99, 0x62, 0x07, 0xe3, 0xb0, 0x42, 0xfa, 0x50, 0x89, 0xf9, 0x67, 0x41, 0x22,
	0xdd, 0x26, 0x4c, 0x4b, 0x32, 0x2b, 0x2a, 0x7b, 0x14, 0x24, 0xc2, 0xea, 0x2f, 0x1f, 0x01, 0x69,
	0x3e, 0x0b, 0xba, 0xcf, 0x51, 0x90, 0xd4, 0x3e, 0x4f, 0xe1, 0x46, 0x85, 0x50, 0x9e, 0xe1, 0x1f,
	0x46, 0x8b, 0x12, 0x5a, 0x55, 0xe9, 0x3d, 0x9e, 0xa1, 0xe6, 0x54, 0xb7, 0x27, 0x31, 0xcd, 0xaa,
	0xad, 0xb7, 0x27, 0xa8, 0xda, 0xcb, 0x84, 0x4e, 0x3e, 0x2e, 0x72, 0x8e, 0xcc, 0xec, 0x6c, 0x18,
	0x9b, 0xcb, 0xde, 0xe4, 0x28, 0xee, 0x80, 0xf2, 0x38, 0xf3, 0xcb, 0xf3, 0x9c, 0x99, 0x5d, 0x99,
	0xeb, 0x8a, 0xc0, 0xfb, 0xf3, 0x9c, 0xd9, 0x0f, 0xe1, 0x3f, 0x7d, 0x54, 0x66, 0x5f, 0xd8, 0x37,
	0x03, 0x3a, 0xd5, 0x24, 0x90, 0x67, 0xd0, 0x4a, 0x31, 0xaa, 0x96, 0xc2, 0x9d, 0xb9, 0xf3, 0x83,
	0xd1, 0xeb, 0x86, 0x27, 0x08, 0x32, 0x80, 0x5e, 0x35, 0xcc, 0xbe, 0x10, 0x50, 0x7b, 0xe1, 0xc1,
	0x3c, 0x81, 0xaa, 0x3f, 0xa5, 0x03, 0x38, 0x3d, 0xed, 0x2e, 0x41, 0xa7, 0x9a, 0x49, 0xdb, 0x86,
	0xd6, 0x00, 0xa3, 0xd9, 0x8f, 0xf0, 0x06, 0xa0, 0x96, 0x9a, 0x59, 0x4a, 0x6e, 0x43, 0x2f, 0x65,
	0xe5, 0x31, 0x1f, 0xaa, 0xb4, 0xfa, 0x9c, 0x40, 0x85, 0x44, 0xc1, 0xee, 0xe0, 0xc7, 0xa5, 0x65,
	0x5c, 0x5c, 0x5a, 0xc6, 0xaf, 0x4b, 0xcb, 0xf8, 0x72, 0x65, 0x35, 0x2e, 0xae, 0xac, 0xc6, 0xcf,
	0x2b, 0xab, 0xf1, 0xa1, 0x1f, 0xc5, 0xe5, 0xf1, 0x38, 0x74, 0x28, 0x4f, 0x27, 0x1b, 0x5a, 0xfd,
	0x3c, 0xc6, 0xe1, 0x89, 0x4b, 0x93, 0x98, 0x65, 0xa5, 0x1b, 0x15, 0x39, 0xd5, 0x76, 0x76, 0xd8,
	0x96, 0x1b, 0xba, 0xff, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xdc, 0xe4, 0x65, 0xe4, 0xd4, 0x05, 0x00,
	0x00,
}

func (m *AppDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDescriptor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.QueryServices) > 0 {
		for iNdEx := len(m.QueryServices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QueryServices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDescriptor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDescriptor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Codec != nil {
		{
			size, err := m.Codec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDescriptor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Codec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Codec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Codec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InterfacesDescriptors) > 0 {
		for iNdEx := len(m.InterfacesDescriptors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InterfacesDescriptors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDescriptor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InterfaceDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfaceDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InterfaceImplementers) > 0 {
		for iNdEx := len(m.InterfaceImplementers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InterfaceImplementers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDescriptor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDescriptor(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InterfaceImplementer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceImplementer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfaceImplementer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FullName) > 0 {
		i -= len(m.FullName)
		copy(dAtA[i:], m.FullName)
		i = encodeVarintDescriptor(dAtA, i, uint64(len(m.FullName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CoinType != 0 {
		i = encodeVarintDescriptor(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x40
	}
	if m.Purpose != 0 {
		i = encodeVarintDescriptor(dAtA, i, uint64(m.Purpose))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Bech32ConsPubPrefix) > 0 {
		i -= len(m.Bech32ConsPubPrefix)
		copy(dAtA[i:], m.Bech32ConsPubPrefix)
		i = encodeVarintDescriptor(dAtA, i, uint64(len(m.Bech32ConsPubPrefix)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Bech32ConsAddrPrefix) > 0 {
		i -= len(m.Bech32ConsAddrPrefix)
		copy(dAtA[i:], m.Bech32ConsAddrPrefix)
		i = encodeVarintDescriptor(dAtA, i, uint64(len(m.Bech32ConsAddrPrefix)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Bech32ValPubPrefix) > 0 {
		i -= len(m.Bech32ValPubPrefix)
		copy(dAtA[i:], m.Bech32ValPubPrefix)
		i = encodeVarintDescriptor(dAtA, i, uint64(len(m.Bech32ValPubPrefix)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Bech32ValAddrPrefix) > 0 {
		i -= len(m.Bech32ValAddrPrefix)
		copy(dAtA[i:], m.Bech32ValAddrPrefix)
		i = encodeVarintDescriptor(dAtA, i, uint64(len(m.Bech32ValAddrPrefix)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Bech32AccPubPrefix) > 0 {
		i -= len(m.Bech32AccPubPrefix)
		copy(dAtA[i:], m.Bech32AccPubPrefix)
		i = encodeVarintDescriptor(dAtA, i, uint64(len(m.Bech32AccPubPrefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bech32AccAddressPrefix) > 0 {
		i -= len(m.Bech32AccAddressPrefix)
		copy(dAtA[i:], m.Bech32AccAddressPrefix)
		i = encodeVarintDescriptor(dAtA, i, uint64(len(m.Bech32AccAddressPrefix)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FullName) > 0 {
		i -= len(m.FullName)
		copy(dAtA[i:], m.FullName)
		i = encodeVarintDescriptor(dAtA, i, uint64(len(m.FullName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Message_Msg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_Msg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDescriptor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Message_ServiceMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message_ServiceMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ServiceMsg != nil {
		{
			size, err := m.ServiceMsg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDescriptor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FullName) > 0 {
		i -= len(m.FullName)
		copy(dAtA[i:], m.FullName)
		i = encodeVarintDescriptor(dAtA, i, uint64(len(m.FullName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MethodName) > 0 {
		i -= len(m.MethodName)
		copy(dAtA[i:], m.MethodName)
		i = encodeVarintDescriptor(dAtA, i, uint64(len(m.MethodName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FullName) > 0 {
		i -= len(m.FullName)
		copy(dAtA[i:], m.FullName)
		i = encodeVarintDescriptor(dAtA, i, uint64(len(m.FullName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDescriptor(dAtA []byte, offset int, v uint64) int {
	offset -= sovDescriptor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AppDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Codec != nil {
		l = m.Codec.Size()
		n += 1 + l + sovDescriptor(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovDescriptor(uint64(l))
	}
	if len(m.QueryServices) > 0 {
		for _, e := range m.QueryServices {
			l = e.Size()
			n += 1 + l + sovDescriptor(uint64(l))
		}
	}
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovDescriptor(uint64(l))
		}
	}
	return n
}

func (m *Codec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InterfacesDescriptors) > 0 {
		for _, e := range m.InterfacesDescriptors {
			l = e.Size()
			n += 1 + l + sovDescriptor(uint64(l))
		}
	}
	return n
}

func (m *InterfaceDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDescriptor(uint64(l))
	}
	if len(m.InterfaceImplementers) > 0 {
		for _, e := range m.InterfaceImplementers {
			l = e.Size()
			n += 1 + l + sovDescriptor(uint64(l))
		}
	}
	return n
}

func (m *InterfaceImplementer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovDescriptor(uint64(l))
	}
	return n
}

func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bech32AccAddressPrefix)
	if l > 0 {
		n += 1 + l + sovDescriptor(uint64(l))
	}
	l = len(m.Bech32AccPubPrefix)
	if l > 0 {
		n += 1 + l + sovDescriptor(uint64(l))
	}
	l = len(m.Bech32ValAddrPrefix)
	if l > 0 {
		n += 1 + l + sovDescriptor(uint64(l))
	}
	l = len(m.Bech32ValPubPrefix)
	if l > 0 {
		n += 1 + l + sovDescriptor(uint64(l))
	}
	l = len(m.Bech32ConsAddrPrefix)
	if l > 0 {
		n += 1 + l + sovDescriptor(uint64(l))
	}
	l = len(m.Bech32ConsPubPrefix)
	if l > 0 {
		n += 1 + l + sovDescriptor(uint64(l))
	}
	if m.Purpose != 0 {
		n += 1 + sovDescriptor(uint64(m.Purpose))
	}
	if m.CoinType != 0 {
		n += 1 + sovDescriptor(uint64(m.CoinType))
	}
	return n
}

func (m *QueryService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovDescriptor(uint64(l))
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *Message_Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovDescriptor(uint64(l))
	}
	return n
}
func (m *Message_ServiceMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceMsg != nil {
		l = m.ServiceMsg.Size()
		n += 1 + l + sovDescriptor(uint64(l))
	}
	return n
}
func (m *Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovDescriptor(uint64(l))
	}
	return n
}

func (m *ServiceMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovDescriptor(uint64(l))
	}
	l = len(m.MethodName)
	if l > 0 {
		n += 1 + l + sovDescriptor(uint64(l))
	}
	return n
}

func sovDescriptor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDescriptor(x uint64) (n int) {
	return sovDescriptor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDescriptor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Codec == nil {
				m.Codec = &Codec{}
			}
			if err := m.Codec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryServices = append(m.QueryServices, &QueryService{})
			if err := m.QueryServices[len(m.QueryServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &Message{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDescriptor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDescriptor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Codec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDescriptor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Codec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Codec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfacesDescriptors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfacesDescriptors = append(m.InterfacesDescriptors, &InterfaceDescriptor{})
			if err := m.InterfacesDescriptors[len(m.InterfacesDescriptors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDescriptor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDescriptor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDescriptor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterfaceImplementers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InterfaceImplementers = append(m.InterfaceImplementers, &InterfaceImplementer{})
			if err := m.InterfaceImplementers[len(m.InterfaceImplementers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDescriptor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDescriptor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceImplementer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDescriptor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceImplementer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceImplementer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDescriptor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDescriptor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDescriptor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32AccAddressPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32AccAddressPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32AccPubPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32AccPubPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32ValAddrPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32ValAddrPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32ValPubPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32ValPubPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32ConsAddrPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32ConsAddrPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bech32ConsPubPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bech32ConsPubPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purpose", wireType)
			}
			m.Purpose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Purpose |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDescriptor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDescriptor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDescriptor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDescriptor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDescriptor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDescriptor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Msg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_Msg{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceMsg{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_ServiceMsg{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDescriptor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDescriptor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDescriptor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDescriptor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDescriptor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDescriptor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MethodName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDescriptor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDescriptor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MethodName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDescriptor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDescriptor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDescriptor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDescriptor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDescriptor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDescriptor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDescriptor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDescriptor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDescriptor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDescriptor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDescriptor = fmt.Errorf("proto: unexpected end of group")
)
