// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	types "github.com/cosmos/cosmos-sdk/types"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// FeeAllowance returns fee granted to the grantee by the granter.
	FeeAllowance(ctx context.Context, in *QueryFeeAllowanceRequest, opts ...grpc.CallOption) (*QueryFeeAllowanceResponse, error)
	// FeeAllowances returns all the grants for address.
	FeeAllowances(ctx context.Context, in *QueryFeeAllowancesRequest, opts ...grpc.CallOption) (*QueryFeeAllowancesResponse, error)
}

type queryClient struct {
	cc             grpc.ClientConnInterface
	_FeeAllowance  types.Invoker
	_FeeAllowances types.Invoker
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc: cc}
}

func (c *queryClient) FeeAllowance(ctx context.Context, in *QueryFeeAllowanceRequest, opts ...grpc.CallOption) (*QueryFeeAllowanceResponse, error) {
	if invoker := c._FeeAllowance; invoker != nil {
		var out QueryFeeAllowanceResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._FeeAllowance, err = invokerConn.Invoker("/cosmos.feegrant.v1beta1.Query/FeeAllowance")
		if err != nil {
			var out QueryFeeAllowanceResponse
			err = c._FeeAllowance(ctx, in, &out)
			return &out, err
		}
	}
	out := new(QueryFeeAllowanceResponse)
	err := c.cc.Invoke(ctx, "/cosmos.feegrant.v1beta1.Query/FeeAllowance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeAllowances(ctx context.Context, in *QueryFeeAllowancesRequest, opts ...grpc.CallOption) (*QueryFeeAllowancesResponse, error) {
	if invoker := c._FeeAllowances; invoker != nil {
		var out QueryFeeAllowancesResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._FeeAllowances, err = invokerConn.Invoker("/cosmos.feegrant.v1beta1.Query/FeeAllowances")
		if err != nil {
			var out QueryFeeAllowancesResponse
			err = c._FeeAllowances(ctx, in, &out)
			return &out, err
		}
	}
	out := new(QueryFeeAllowancesResponse)
	err := c.cc.Invoke(ctx, "/cosmos.feegrant.v1beta1.Query/FeeAllowances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// FeeAllowance returns fee granted to the grantee by the granter.
	FeeAllowance(types.Context, *QueryFeeAllowanceRequest) (*QueryFeeAllowanceResponse, error)
	// FeeAllowances returns all the grants for address.
	FeeAllowances(types.Context, *QueryFeeAllowancesRequest) (*QueryFeeAllowancesResponse, error)
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_FeeAllowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeAllowanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeAllowance(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.feegrant.v1beta1.Query/FeeAllowance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeAllowance(types.UnwrapSDKContext(ctx), req.(*QueryFeeAllowanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeAllowances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeAllowancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeAllowances(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.feegrant.v1beta1.Query/FeeAllowances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeAllowances(types.UnwrapSDKContext(ctx), req.(*QueryFeeAllowancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.feegrant.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FeeAllowance",
			Handler:    _Query_FeeAllowance_Handler,
		},
		{
			MethodName: "FeeAllowances",
			Handler:    _Query_FeeAllowances_Handler,
		},
	},
	Metadata: "cosmos/feegrant/v1beta1/query.proto",
}

const (
	QueryFeeAllowanceMethod  = "/cosmos.feegrant.v1beta1.Query/FeeAllowance"
	QueryFeeAllowancesMethod = "/cosmos.feegrant.v1beta1.Query/FeeAllowances"
)
