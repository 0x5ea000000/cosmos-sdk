// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	types "github.com/cosmos/cosmos-sdk/types"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// CurrentPlan queries the current upgrade plan.
	CurrentPlan(ctx context.Context, in *QueryCurrentPlanRequest, opts ...grpc.CallOption) (*QueryCurrentPlanResponse, error)
	// AppliedPlan queries a previously applied upgrade plan by its name.
	AppliedPlan(ctx context.Context, in *QueryAppliedPlanRequest, opts ...grpc.CallOption) (*QueryAppliedPlanResponse, error)
	// UpgradedConsensusState queries the consensus state that will serve
	// as a trusted kernel for the next version of this chain. It will only be
	// stored at the last height of this chain.
	// UpgradedConsensusState RPC not supported with legacy querier
	UpgradedConsensusState(ctx context.Context, in *QueryUpgradedConsensusStateRequest, opts ...grpc.CallOption) (*QueryUpgradedConsensusStateResponse, error)
}

type queryClient struct {
	cc                      grpc.ClientConnInterface
	_CurrentPlan            types.Invoker
	_AppliedPlan            types.Invoker
	_UpgradedConsensusState types.Invoker
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc: cc}
}

func (c *queryClient) CurrentPlan(ctx context.Context, in *QueryCurrentPlanRequest, opts ...grpc.CallOption) (*QueryCurrentPlanResponse, error) {
	if invoker := c._CurrentPlan; invoker != nil {
		var out QueryCurrentPlanResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._CurrentPlan, err = invokerConn.Invoker("/cosmos.upgrade.v1beta1.QueryCurrentPlan")
		if err != nil {
			var out QueryCurrentPlanResponse
			err = c._CurrentPlan(ctx, in, &out)
			return &out, err
		}
	}
	out := new(QueryCurrentPlanResponse)
	err := c.cc.Invoke(ctx, "/cosmos.upgrade.v1beta1.QueryCurrentPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AppliedPlan(ctx context.Context, in *QueryAppliedPlanRequest, opts ...grpc.CallOption) (*QueryAppliedPlanResponse, error) {
	if invoker := c._AppliedPlan; invoker != nil {
		var out QueryAppliedPlanResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._AppliedPlan, err = invokerConn.Invoker("/cosmos.upgrade.v1beta1.QueryAppliedPlan")
		if err != nil {
			var out QueryAppliedPlanResponse
			err = c._AppliedPlan(ctx, in, &out)
			return &out, err
		}
	}
	out := new(QueryAppliedPlanResponse)
	err := c.cc.Invoke(ctx, "/cosmos.upgrade.v1beta1.QueryAppliedPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UpgradedConsensusState(ctx context.Context, in *QueryUpgradedConsensusStateRequest, opts ...grpc.CallOption) (*QueryUpgradedConsensusStateResponse, error) {
	if invoker := c._UpgradedConsensusState; invoker != nil {
		var out QueryUpgradedConsensusStateResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._UpgradedConsensusState, err = invokerConn.Invoker("/cosmos.upgrade.v1beta1.QueryUpgradedConsensusState")
		if err != nil {
			var out QueryUpgradedConsensusStateResponse
			err = c._UpgradedConsensusState(ctx, in, &out)
			return &out, err
		}
	}
	out := new(QueryUpgradedConsensusStateResponse)
	err := c.cc.Invoke(ctx, "/cosmos.upgrade.v1beta1.QueryUpgradedConsensusState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// CurrentPlan queries the current upgrade plan.
	CurrentPlan(context.Context, *QueryCurrentPlanRequest) (*QueryCurrentPlanResponse, error)
	// AppliedPlan queries a previously applied upgrade plan by its name.
	AppliedPlan(context.Context, *QueryAppliedPlanRequest) (*QueryAppliedPlanResponse, error)
	// UpgradedConsensusState queries the consensus state that will serve
	// as a trusted kernel for the next version of this chain. It will only be
	// stored at the last height of this chain.
	// UpgradedConsensusState RPC not supported with legacy querier
	UpgradedConsensusState(context.Context, *QueryUpgradedConsensusStateRequest) (*QueryUpgradedConsensusStateResponse, error)
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_CurrentPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentPlan(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.upgrade.v1beta1.QueryCurrentPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentPlan(types.UnwrapSDKContext(ctx), req.(*QueryCurrentPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AppliedPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppliedPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AppliedPlan(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.upgrade.v1beta1.QueryAppliedPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AppliedPlan(types.UnwrapSDKContext(ctx), req.(*QueryAppliedPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UpgradedConsensusState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUpgradedConsensusStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UpgradedConsensusState(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.upgrade.v1beta1.QueryUpgradedConsensusState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UpgradedConsensusState(types.UnwrapSDKContext(ctx), req.(*QueryUpgradedConsensusStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.upgrade.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CurrentPlan",
			Handler:    _Query_CurrentPlan_Handler,
		},
		{
			MethodName: "AppliedPlan",
			Handler:    _Query_AppliedPlan_Handler,
		},
		{
			MethodName: "UpgradedConsensusState",
			Handler:    _Query_UpgradedConsensusState_Handler,
		},
	},
	Metadata: "cosmos/upgrade/v1beta1/query.proto",
}

const (
	QueryCurrentPlanMethod            = "/cosmos.upgrade.v1beta1.QueryCurrentPlan"
	QueryAppliedPlanMethod            = "/cosmos.upgrade.v1beta1.QueryAppliedPlan"
	QueryUpgradedConsensusStateMethod = "/cosmos.upgrade.v1beta1.QueryUpgradedConsensusState"
)
