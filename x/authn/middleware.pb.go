// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/authn/v1/middleware.proto

package authn

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValidateMemoMiddleware struct {
	MaxMemoCharacters uint64 `protobuf:"varint,1,opt,name=max_memo_characters,json=maxMemoCharacters,proto3" json:"max_memo_characters,omitempty"`
}

func (m *ValidateMemoMiddleware) Reset()         { *m = ValidateMemoMiddleware{} }
func (m *ValidateMemoMiddleware) String() string { return proto.CompactTextString(m) }
func (*ValidateMemoMiddleware) ProtoMessage()    {}
func (*ValidateMemoMiddleware) Descriptor() ([]byte, []int) {
	return fileDescriptor_b60099c6a9247712, []int{0}
}
func (m *ValidateMemoMiddleware) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateMemoMiddleware) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateMemoMiddleware.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateMemoMiddleware) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateMemoMiddleware.Merge(m, src)
}
func (m *ValidateMemoMiddleware) XXX_Size() int {
	return m.Size()
}
func (m *ValidateMemoMiddleware) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateMemoMiddleware.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateMemoMiddleware proto.InternalMessageInfo

func (m *ValidateMemoMiddleware) GetMaxMemoCharacters() uint64 {
	if m != nil {
		return m.MaxMemoCharacters
	}
	return 0
}

type ConsumeGasForTxSizeMiddleware struct {
	TxSizeCostPerByte uint64 `protobuf:"varint,1,opt,name=tx_size_cost_per_byte,json=txSizeCostPerByte,proto3" json:"tx_size_cost_per_byte,omitempty"`
}

func (m *ConsumeGasForTxSizeMiddleware) Reset()         { *m = ConsumeGasForTxSizeMiddleware{} }
func (m *ConsumeGasForTxSizeMiddleware) String() string { return proto.CompactTextString(m) }
func (*ConsumeGasForTxSizeMiddleware) ProtoMessage()    {}
func (*ConsumeGasForTxSizeMiddleware) Descriptor() ([]byte, []int) {
	return fileDescriptor_b60099c6a9247712, []int{1}
}
func (m *ConsumeGasForTxSizeMiddleware) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsumeGasForTxSizeMiddleware) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsumeGasForTxSizeMiddleware.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsumeGasForTxSizeMiddleware) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeGasForTxSizeMiddleware.Merge(m, src)
}
func (m *ConsumeGasForTxSizeMiddleware) XXX_Size() int {
	return m.Size()
}
func (m *ConsumeGasForTxSizeMiddleware) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeGasForTxSizeMiddleware.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeGasForTxSizeMiddleware proto.InternalMessageInfo

func (m *ConsumeGasForTxSizeMiddleware) GetTxSizeCostPerByte() uint64 {
	if m != nil {
		return m.TxSizeCostPerByte
	}
	return 0
}

type SetPubKeyMiddleware struct {
}

func (m *SetPubKeyMiddleware) Reset()         { *m = SetPubKeyMiddleware{} }
func (m *SetPubKeyMiddleware) String() string { return proto.CompactTextString(m) }
func (*SetPubKeyMiddleware) ProtoMessage()    {}
func (*SetPubKeyMiddleware) Descriptor() ([]byte, []int) {
	return fileDescriptor_b60099c6a9247712, []int{2}
}
func (m *SetPubKeyMiddleware) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetPubKeyMiddleware) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetPubKeyMiddleware.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetPubKeyMiddleware) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPubKeyMiddleware.Merge(m, src)
}
func (m *SetPubKeyMiddleware) XXX_Size() int {
	return m.Size()
}
func (m *SetPubKeyMiddleware) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPubKeyMiddleware.DiscardUnknown(m)
}

var xxx_messageInfo_SetPubKeyMiddleware proto.InternalMessageInfo

type ValidateSigCountMiddleware struct {
	TxSigLimit uint64 `protobuf:"varint,1,opt,name=tx_sig_limit,json=txSigLimit,proto3" json:"tx_sig_limit,omitempty"`
}

func (m *ValidateSigCountMiddleware) Reset()         { *m = ValidateSigCountMiddleware{} }
func (m *ValidateSigCountMiddleware) String() string { return proto.CompactTextString(m) }
func (*ValidateSigCountMiddleware) ProtoMessage()    {}
func (*ValidateSigCountMiddleware) Descriptor() ([]byte, []int) {
	return fileDescriptor_b60099c6a9247712, []int{3}
}
func (m *ValidateSigCountMiddleware) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateSigCountMiddleware) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateSigCountMiddleware.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateSigCountMiddleware) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateSigCountMiddleware.Merge(m, src)
}
func (m *ValidateSigCountMiddleware) XXX_Size() int {
	return m.Size()
}
func (m *ValidateSigCountMiddleware) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateSigCountMiddleware.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateSigCountMiddleware proto.InternalMessageInfo

func (m *ValidateSigCountMiddleware) GetTxSigLimit() uint64 {
	if m != nil {
		return m.TxSigLimit
	}
	return 0
}

type SigGasConsumeMiddleware struct {
	SigVerifyCostEd25519   uint64   `protobuf:"varint,1,opt,name=sig_verify_cost_ed25519,json=sigVerifyCostEd25519,proto3" json:"sig_verify_cost_ed25519,omitempty"`
	SigVerifyCostSecp256K1 uint64   `protobuf:"varint,2,opt,name=sig_verify_cost_secp256k1,json=sigVerifyCostSecp256k1,proto3" json:"sig_verify_cost_secp256k1,omitempty"`
	AllowedPubKeyTypes     []string `protobuf:"bytes,3,rep,name=allowed_pub_key_types,json=allowedPubKeyTypes,proto3" json:"allowed_pub_key_types,omitempty"`
}

func (m *SigGasConsumeMiddleware) Reset()         { *m = SigGasConsumeMiddleware{} }
func (m *SigGasConsumeMiddleware) String() string { return proto.CompactTextString(m) }
func (*SigGasConsumeMiddleware) ProtoMessage()    {}
func (*SigGasConsumeMiddleware) Descriptor() ([]byte, []int) {
	return fileDescriptor_b60099c6a9247712, []int{4}
}
func (m *SigGasConsumeMiddleware) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigGasConsumeMiddleware) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigGasConsumeMiddleware.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigGasConsumeMiddleware) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigGasConsumeMiddleware.Merge(m, src)
}
func (m *SigGasConsumeMiddleware) XXX_Size() int {
	return m.Size()
}
func (m *SigGasConsumeMiddleware) XXX_DiscardUnknown() {
	xxx_messageInfo_SigGasConsumeMiddleware.DiscardUnknown(m)
}

var xxx_messageInfo_SigGasConsumeMiddleware proto.InternalMessageInfo

func (m *SigGasConsumeMiddleware) GetSigVerifyCostEd25519() uint64 {
	if m != nil {
		return m.SigVerifyCostEd25519
	}
	return 0
}

func (m *SigGasConsumeMiddleware) GetSigVerifyCostSecp256K1() uint64 {
	if m != nil {
		return m.SigVerifyCostSecp256K1
	}
	return 0
}

func (m *SigGasConsumeMiddleware) GetAllowedPubKeyTypes() []string {
	if m != nil {
		return m.AllowedPubKeyTypes
	}
	return nil
}

type SigVerificationMiddleware struct {
}

func (m *SigVerificationMiddleware) Reset()         { *m = SigVerificationMiddleware{} }
func (m *SigVerificationMiddleware) String() string { return proto.CompactTextString(m) }
func (*SigVerificationMiddleware) ProtoMessage()    {}
func (*SigVerificationMiddleware) Descriptor() ([]byte, []int) {
	return fileDescriptor_b60099c6a9247712, []int{5}
}
func (m *SigVerificationMiddleware) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigVerificationMiddleware) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigVerificationMiddleware.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigVerificationMiddleware) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigVerificationMiddleware.Merge(m, src)
}
func (m *SigVerificationMiddleware) XXX_Size() int {
	return m.Size()
}
func (m *SigVerificationMiddleware) XXX_DiscardUnknown() {
	xxx_messageInfo_SigVerificationMiddleware.DiscardUnknown(m)
}

var xxx_messageInfo_SigVerificationMiddleware proto.InternalMessageInfo

type IncrementSequenceMiddleware struct {
}

func (m *IncrementSequenceMiddleware) Reset()         { *m = IncrementSequenceMiddleware{} }
func (m *IncrementSequenceMiddleware) String() string { return proto.CompactTextString(m) }
func (*IncrementSequenceMiddleware) ProtoMessage()    {}
func (*IncrementSequenceMiddleware) Descriptor() ([]byte, []int) {
	return fileDescriptor_b60099c6a9247712, []int{6}
}
func (m *IncrementSequenceMiddleware) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncrementSequenceMiddleware) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncrementSequenceMiddleware.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncrementSequenceMiddleware) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncrementSequenceMiddleware.Merge(m, src)
}
func (m *IncrementSequenceMiddleware) XXX_Size() int {
	return m.Size()
}
func (m *IncrementSequenceMiddleware) XXX_DiscardUnknown() {
	xxx_messageInfo_IncrementSequenceMiddleware.DiscardUnknown(m)
}

var xxx_messageInfo_IncrementSequenceMiddleware proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ValidateMemoMiddleware)(nil), "cosmos.authn.v1.ValidateMemoMiddleware")
	proto.RegisterType((*ConsumeGasForTxSizeMiddleware)(nil), "cosmos.authn.v1.ConsumeGasForTxSizeMiddleware")
	proto.RegisterType((*SetPubKeyMiddleware)(nil), "cosmos.authn.v1.SetPubKeyMiddleware")
	proto.RegisterType((*ValidateSigCountMiddleware)(nil), "cosmos.authn.v1.ValidateSigCountMiddleware")
	proto.RegisterType((*SigGasConsumeMiddleware)(nil), "cosmos.authn.v1.SigGasConsumeMiddleware")
	proto.RegisterType((*SigVerificationMiddleware)(nil), "cosmos.authn.v1.SigVerificationMiddleware")
	proto.RegisterType((*IncrementSequenceMiddleware)(nil), "cosmos.authn.v1.IncrementSequenceMiddleware")
}

func init() { proto.RegisterFile("cosmos/authn/v1/middleware.proto", fileDescriptor_b60099c6a9247712) }

var fileDescriptor_b60099c6a9247712 = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x4f, 0x6b, 0xd4, 0x40,
	0x18, 0xc6, 0x37, 0x56, 0x04, 0x07, 0x41, 0x4c, 0xdd, 0x76, 0x6b, 0x69, 0x58, 0x82, 0x87, 0x5e,
	0x4c, 0x4c, 0x65, 0x85, 0x5e, 0x7a, 0xe8, 0xa2, 0x55, 0xb4, 0x50, 0x9b, 0xd2, 0x83, 0x97, 0x61,
	0x32, 0x79, 0xcd, 0x0e, 0x9b, 0xc9, 0xc4, 0x99, 0x37, 0xdb, 0xa4, 0x9f, 0xc2, 0x4f, 0xe4, 0xd9,
	0x63, 0x8f, 0x1e, 0x65, 0xf7, 0x8b, 0x48, 0xfe, 0xec, 0x1a, 0x7b, 0x0a, 0xe4, 0x79, 0x7f, 0xbf,
	0x79, 0x66, 0x78, 0xc9, 0x98, 0x2b, 0x23, 0x95, 0xf1, 0x59, 0x81, 0xb3, 0xcc, 0x5f, 0x04, 0xbe,
	0x14, 0x71, 0x9c, 0xc2, 0x0d, 0xd3, 0xe0, 0xe5, 0x5a, 0xa1, 0xb2, 0x9f, 0xb6, 0x13, 0x5e, 0x33,
	0xe1, 0x2d, 0x02, 0xf7, 0x03, 0xd9, 0xb9, 0x66, 0xa9, 0x88, 0x19, 0xc2, 0x39, 0x48, 0x75, 0xbe,
	0x01, 0x6c, 0x8f, 0x6c, 0x4b, 0x56, 0x52, 0x09, 0x52, 0x51, 0x3e, 0x63, 0x9a, 0x71, 0x04, 0x6d,
	0x46, 0xd6, 0xd8, 0x3a, 0x7c, 0x78, 0xf9, 0x4c, 0xb2, 0xb2, 0x9e, 0x9f, 0x6e, 0x02, 0xf7, 0x0b,
	0x39, 0x98, 0xaa, 0xcc, 0x14, 0x12, 0xce, 0x98, 0x79, 0xaf, 0xf4, 0x55, 0x19, 0x8a, 0x5b, 0xe8,
	0x09, 0x5f, 0x93, 0x21, 0x96, 0xd4, 0x88, 0x5b, 0xa0, 0x5c, 0x19, 0xa4, 0x39, 0x68, 0x1a, 0x55,
	0x08, 0x6b, 0x25, 0x36, 0xc0, 0x54, 0x19, 0xbc, 0x00, 0x7d, 0x5a, 0x21, 0xb8, 0x43, 0xb2, 0x1d,
	0x02, 0x5e, 0x14, 0xd1, 0x27, 0xa8, 0xfe, 0x89, 0xdc, 0x13, 0xf2, 0x62, 0xdd, 0x39, 0x14, 0xc9,
	0x54, 0x15, 0x19, 0xf6, 0x8e, 0x19, 0x93, 0x27, 0xcd, 0x31, 0x09, 0x4d, 0x85, 0x14, 0xd8, 0xd9,
	0x49, 0x6d, 0x4f, 0x3e, 0xd7, 0x7f, 0xdc, 0x9f, 0x16, 0xd9, 0x0d, 0x45, 0x72, 0xc6, 0x4c, 0x57,
	0xb8, 0x47, 0x4f, 0xc8, 0x6e, 0x8d, 0x2e, 0x40, 0x8b, 0x6f, 0x55, 0xdb, 0x13, 0xe2, 0xa3, 0xc9,
	0x24, 0x38, 0xee, 0x44, 0xcf, 0x8d, 0x48, 0xae, 0x9b, 0xb4, 0x6e, 0xfa, 0xae, 0xcd, 0xec, 0x63,
	0xb2, 0x77, 0x1f, 0x33, 0xc0, 0xf3, 0xa3, 0xc9, 0xdb, 0x79, 0x30, 0x7a, 0xd0, 0x80, 0x3b, 0xff,
	0x81, 0xe1, 0x3a, 0xb5, 0x03, 0x32, 0x64, 0x69, 0xaa, 0x6e, 0x20, 0xa6, 0x79, 0x11, 0xd1, 0x39,
	0x54, 0x14, 0xab, 0x1c, 0xcc, 0x68, 0x6b, 0xbc, 0x75, 0xf8, 0xf8, 0xd2, 0xee, 0xc2, 0xf6, 0x15,
	0xae, 0xea, 0xc4, 0xdd, 0x27, 0x7b, 0x61, 0x27, 0x13, 0x9c, 0xa1, 0x50, 0x59, 0xef, 0x75, 0x0e,
	0xc8, 0xfe, 0xc7, 0x8c, 0x6b, 0x90, 0x90, 0x61, 0x08, 0xdf, 0x0b, 0xc8, 0x78, 0xef, 0x82, 0xa7,
	0x27, 0xbf, 0x96, 0x8e, 0x75, 0xb7, 0x74, 0xac, 0x3f, 0x4b, 0xc7, 0xfa, 0xb1, 0x72, 0x06, 0x77,
	0x2b, 0x67, 0xf0, 0x7b, 0xe5, 0x0c, 0xbe, 0xbe, 0x4c, 0x04, 0xce, 0x8a, 0xc8, 0xe3, 0x4a, 0xfa,
	0xdd, 0x22, 0xb5, 0x9f, 0x57, 0x26, 0x9e, 0xfb, 0x65, 0xbb, 0x55, 0xd1, 0xa3, 0x66, 0x91, 0xde,
	0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x90, 0x66, 0x0f, 0x6c, 0x02, 0x00, 0x00,
}

func (m *ValidateMemoMiddleware) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateMemoMiddleware) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateMemoMiddleware) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxMemoCharacters != 0 {
		i = encodeVarintMiddleware(dAtA, i, uint64(m.MaxMemoCharacters))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConsumeGasForTxSizeMiddleware) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumeGasForTxSizeMiddleware) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsumeGasForTxSizeMiddleware) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxSizeCostPerByte != 0 {
		i = encodeVarintMiddleware(dAtA, i, uint64(m.TxSizeCostPerByte))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetPubKeyMiddleware) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetPubKeyMiddleware) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetPubKeyMiddleware) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ValidateSigCountMiddleware) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateSigCountMiddleware) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateSigCountMiddleware) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxSigLimit != 0 {
		i = encodeVarintMiddleware(dAtA, i, uint64(m.TxSigLimit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SigGasConsumeMiddleware) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigGasConsumeMiddleware) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigGasConsumeMiddleware) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedPubKeyTypes) > 0 {
		for iNdEx := len(m.AllowedPubKeyTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedPubKeyTypes[iNdEx])
			copy(dAtA[i:], m.AllowedPubKeyTypes[iNdEx])
			i = encodeVarintMiddleware(dAtA, i, uint64(len(m.AllowedPubKeyTypes[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.SigVerifyCostSecp256K1 != 0 {
		i = encodeVarintMiddleware(dAtA, i, uint64(m.SigVerifyCostSecp256K1))
		i--
		dAtA[i] = 0x10
	}
	if m.SigVerifyCostEd25519 != 0 {
		i = encodeVarintMiddleware(dAtA, i, uint64(m.SigVerifyCostEd25519))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SigVerificationMiddleware) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigVerificationMiddleware) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigVerificationMiddleware) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *IncrementSequenceMiddleware) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncrementSequenceMiddleware) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncrementSequenceMiddleware) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMiddleware(dAtA []byte, offset int, v uint64) int {
	offset -= sovMiddleware(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidateMemoMiddleware) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxMemoCharacters != 0 {
		n += 1 + sovMiddleware(uint64(m.MaxMemoCharacters))
	}
	return n
}

func (m *ConsumeGasForTxSizeMiddleware) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxSizeCostPerByte != 0 {
		n += 1 + sovMiddleware(uint64(m.TxSizeCostPerByte))
	}
	return n
}

func (m *SetPubKeyMiddleware) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ValidateSigCountMiddleware) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxSigLimit != 0 {
		n += 1 + sovMiddleware(uint64(m.TxSigLimit))
	}
	return n
}

func (m *SigGasConsumeMiddleware) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SigVerifyCostEd25519 != 0 {
		n += 1 + sovMiddleware(uint64(m.SigVerifyCostEd25519))
	}
	if m.SigVerifyCostSecp256K1 != 0 {
		n += 1 + sovMiddleware(uint64(m.SigVerifyCostSecp256K1))
	}
	if len(m.AllowedPubKeyTypes) > 0 {
		for _, s := range m.AllowedPubKeyTypes {
			l = len(s)
			n += 1 + l + sovMiddleware(uint64(l))
		}
	}
	return n
}

func (m *SigVerificationMiddleware) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *IncrementSequenceMiddleware) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMiddleware(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMiddleware(x uint64) (n int) {
	return sovMiddleware(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidateMemoMiddleware) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiddleware
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateMemoMiddleware: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateMemoMiddleware: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMemoCharacters", wireType)
			}
			m.MaxMemoCharacters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiddleware
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMemoCharacters |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMiddleware(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMiddleware
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumeGasForTxSizeMiddleware) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiddleware
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumeGasForTxSizeMiddleware: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumeGasForTxSizeMiddleware: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxSizeCostPerByte", wireType)
			}
			m.TxSizeCostPerByte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiddleware
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxSizeCostPerByte |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMiddleware(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMiddleware
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPubKeyMiddleware) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiddleware
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPubKeyMiddleware: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPubKeyMiddleware: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMiddleware(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMiddleware
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateSigCountMiddleware) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiddleware
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateSigCountMiddleware: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateSigCountMiddleware: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxSigLimit", wireType)
			}
			m.TxSigLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiddleware
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxSigLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMiddleware(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMiddleware
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigGasConsumeMiddleware) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiddleware
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigGasConsumeMiddleware: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigGasConsumeMiddleware: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigVerifyCostEd25519", wireType)
			}
			m.SigVerifyCostEd25519 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiddleware
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigVerifyCostEd25519 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigVerifyCostSecp256K1", wireType)
			}
			m.SigVerifyCostSecp256K1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiddleware
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigVerifyCostSecp256K1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedPubKeyTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMiddleware
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMiddleware
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMiddleware
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedPubKeyTypes = append(m.AllowedPubKeyTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMiddleware(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMiddleware
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigVerificationMiddleware) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiddleware
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigVerificationMiddleware: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigVerificationMiddleware: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMiddleware(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMiddleware
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncrementSequenceMiddleware) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMiddleware
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncrementSequenceMiddleware: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncrementSequenceMiddleware: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMiddleware(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMiddleware
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMiddleware(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMiddleware
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiddleware
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMiddleware
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMiddleware
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMiddleware
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMiddleware
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMiddleware        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMiddleware          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMiddleware = fmt.Errorf("proto: unexpected end of group")
)
