// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	types "github.com/cosmos/cosmos-sdk/types"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Returns any `Authorization` (or `nil`), with the expiration time, granted to the grantee by the granter for the
	// provided msg type.
	Authorization(ctx context.Context, in *QueryAuthorizationRequest, opts ...grpc.CallOption) (*QueryAuthorizationResponse, error)
	// Returns list of `Authorization`, granted to the grantee by the granter.
	Authorizations(ctx context.Context, in *QueryAuthorizationsRequest, opts ...grpc.CallOption) (*QueryAuthorizationsResponse, error)
}

type queryClient struct {
	cc              grpc.ClientConnInterface
	_Authorization  types.Invoker
	_Authorizations types.Invoker
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc: cc}
}

func (c *queryClient) Authorization(ctx context.Context, in *QueryAuthorizationRequest, opts ...grpc.CallOption) (*QueryAuthorizationResponse, error) {
	if invoker := c._Authorization; invoker != nil {
		var out QueryAuthorizationResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._Authorization, err = invokerConn.Invoker("/cosmos.authz.v1beta1.QueryAuthorization")
		if err != nil {
			var out QueryAuthorizationResponse
			err = c._Authorization(ctx, in, &out)
			return &out, err
		}
	}
	out := new(QueryAuthorizationResponse)
	err := c.cc.Invoke(ctx, "/cosmos.authz.v1beta1.QueryAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Authorizations(ctx context.Context, in *QueryAuthorizationsRequest, opts ...grpc.CallOption) (*QueryAuthorizationsResponse, error) {
	if invoker := c._Authorizations; invoker != nil {
		var out QueryAuthorizationsResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._Authorizations, err = invokerConn.Invoker("/cosmos.authz.v1beta1.QueryAuthorizations")
		if err != nil {
			var out QueryAuthorizationsResponse
			err = c._Authorizations(ctx, in, &out)
			return &out, err
		}
	}
	out := new(QueryAuthorizationsResponse)
	err := c.cc.Invoke(ctx, "/cosmos.authz.v1beta1.QueryAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Returns any `Authorization` (or `nil`), with the expiration time, granted to the grantee by the granter for the
	// provided msg type.
	Authorization(types.Context, *QueryAuthorizationRequest) (*QueryAuthorizationResponse, error)
	// Returns list of `Authorization`, granted to the grantee by the granter.
	Authorizations(types.Context, *QueryAuthorizationsRequest) (*QueryAuthorizationsResponse, error)
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Authorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Authorization(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.authz.v1beta1.QueryAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Authorization(types.UnwrapSDKContext(ctx), req.(*QueryAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Authorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Authorizations(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.authz.v1beta1.QueryAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Authorizations(types.UnwrapSDKContext(ctx), req.(*QueryAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.authz.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorization",
			Handler:    _Query_Authorization_Handler,
		},
		{
			MethodName: "Authorizations",
			Handler:    _Query_Authorizations_Handler,
		},
	},
	Metadata: "cosmos/authz/v1beta1/query.proto",
}

const (
	QueryAuthorizationMethod  = "/cosmos.authz.v1beta1.QueryAuthorization"
	QueryAuthorizationsMethod = "/cosmos.authz.v1beta1.QueryAuthorizations"
)
