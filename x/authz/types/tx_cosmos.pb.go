// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	types "github.com/cosmos/cosmos-sdk/types"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// GrantAuthorization grants the provided authorization to the grantee on the granter's
	// account with the provided expiration time.
	GrantAuthorization(ctx context.Context, in *MsgGrantAuthorizationRequest, opts ...grpc.CallOption) (*MsgGrantAuthorizationResponse, error)
	// ExecAuthorized attempts to execute the provided messages using
	// authorizations granted to the grantee. Each message should have only
	// one signer corresponding to the granter of the authorization.
	ExecAuthorized(ctx context.Context, in *MsgExecAuthorizedRequest, opts ...grpc.CallOption) (*MsgExecAuthorizedResponse, error)
	// RevokeAuthorization revokes any authorization corresponding to the provided method name on the
	// granter's account that has been granted to the grantee.
	RevokeAuthorization(ctx context.Context, in *MsgRevokeAuthorizationRequest, opts ...grpc.CallOption) (*MsgRevokeAuthorizationResponse, error)
}

type msgClient struct {
	cc                   grpc.ClientConnInterface
	_GrantAuthorization  types.Invoker
	_ExecAuthorized      types.Invoker
	_RevokeAuthorization types.Invoker
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc: cc}
}

func (c *msgClient) GrantAuthorization(ctx context.Context, in *MsgGrantAuthorizationRequest, opts ...grpc.CallOption) (*MsgGrantAuthorizationResponse, error) {
	if invoker := c._GrantAuthorization; invoker != nil {
		var out MsgGrantAuthorizationResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._GrantAuthorization, err = invokerConn.Invoker("/cosmos.authz.v1beta1.Msg/GrantAuthorization")
		if err != nil {
			var out MsgGrantAuthorizationResponse
			err = c._GrantAuthorization(ctx, in, &out)
			return &out, err
		}
	}
	out := new(MsgGrantAuthorizationResponse)
	err := c.cc.Invoke(ctx, "/cosmos.authz.v1beta1.Msg/GrantAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecAuthorized(ctx context.Context, in *MsgExecAuthorizedRequest, opts ...grpc.CallOption) (*MsgExecAuthorizedResponse, error) {
	if invoker := c._ExecAuthorized; invoker != nil {
		var out MsgExecAuthorizedResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._ExecAuthorized, err = invokerConn.Invoker("/cosmos.authz.v1beta1.Msg/ExecAuthorized")
		if err != nil {
			var out MsgExecAuthorizedResponse
			err = c._ExecAuthorized(ctx, in, &out)
			return &out, err
		}
	}
	out := new(MsgExecAuthorizedResponse)
	err := c.cc.Invoke(ctx, "/cosmos.authz.v1beta1.Msg/ExecAuthorized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RevokeAuthorization(ctx context.Context, in *MsgRevokeAuthorizationRequest, opts ...grpc.CallOption) (*MsgRevokeAuthorizationResponse, error) {
	if invoker := c._RevokeAuthorization; invoker != nil {
		var out MsgRevokeAuthorizationResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._RevokeAuthorization, err = invokerConn.Invoker("/cosmos.authz.v1beta1.Msg/RevokeAuthorization")
		if err != nil {
			var out MsgRevokeAuthorizationResponse
			err = c._RevokeAuthorization(ctx, in, &out)
			return &out, err
		}
	}
	out := new(MsgRevokeAuthorizationResponse)
	err := c.cc.Invoke(ctx, "/cosmos.authz.v1beta1.Msg/RevokeAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// GrantAuthorization grants the provided authorization to the grantee on the granter's
	// account with the provided expiration time.
	GrantAuthorization(types.Context, *MsgGrantAuthorizationRequest) (*MsgGrantAuthorizationResponse, error)
	// ExecAuthorized attempts to execute the provided messages using
	// authorizations granted to the grantee. Each message should have only
	// one signer corresponding to the granter of the authorization.
	ExecAuthorized(types.Context, *MsgExecAuthorizedRequest) (*MsgExecAuthorizedResponse, error)
	// RevokeAuthorization revokes any authorization corresponding to the provided method name on the
	// granter's account that has been granted to the grantee.
	RevokeAuthorization(types.Context, *MsgRevokeAuthorizationRequest) (*MsgRevokeAuthorizationResponse, error)
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_GrantAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGrantAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GrantAuthorization(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.authz.v1beta1.Msg/GrantAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GrantAuthorization(types.UnwrapSDKContext(ctx), req.(*MsgGrantAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecAuthorizedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecAuthorized(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.authz.v1beta1.Msg/ExecAuthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecAuthorized(types.UnwrapSDKContext(ctx), req.(*MsgExecAuthorizedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RevokeAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RevokeAuthorization(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.authz.v1beta1.Msg/RevokeAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RevokeAuthorization(types.UnwrapSDKContext(ctx), req.(*MsgRevokeAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.authz.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GrantAuthorization",
			Handler:    _Msg_GrantAuthorization_Handler,
		},
		{
			MethodName: "ExecAuthorized",
			Handler:    _Msg_ExecAuthorized_Handler,
		},
		{
			MethodName: "RevokeAuthorization",
			Handler:    _Msg_RevokeAuthorization_Handler,
		},
	},
	Metadata: "cosmos/authz/v1beta1/tx.proto",
}

const (
	MsgGrantAuthorizationMethod  = "/cosmos.authz.v1beta1.Msg/GrantAuthorization"
	MsgExecAuthorizedMethod      = "/cosmos.authz.v1beta1.Msg/ExecAuthorized"
	MsgRevokeAuthorizationMethod = "/cosmos.authz.v1beta1.Msg/RevokeAuthorization"
)
