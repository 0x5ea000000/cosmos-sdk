// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	types "github.com/cosmos/cosmos-sdk/types"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// SetWithdrawAddress defines a method to change the withdraw address
	// for a delegator (or validator self-delegation).
	SetWithdrawAddress(ctx context.Context, in *MsgSetWithdrawAddress, opts ...grpc.CallOption) (*MsgSetWithdrawAddressResponse, error)
	// WithdrawDelegatorReward defines a method to withdraw rewards of delegator
	// from a single validator.
	WithdrawDelegatorReward(ctx context.Context, in *MsgWithdrawDelegatorReward, opts ...grpc.CallOption) (*MsgWithdrawDelegatorRewardResponse, error)
	// WithdrawValidatorCommission defines a method to withdraw the
	// full commission to the validator address.
	WithdrawValidatorCommission(ctx context.Context, in *MsgWithdrawValidatorCommission, opts ...grpc.CallOption) (*MsgWithdrawValidatorCommissionResponse, error)
	// FundCommunityPool defines a method to allow an account to directly
	// fund the community pool.
	FundCommunityPool(ctx context.Context, in *MsgFundCommunityPool, opts ...grpc.CallOption) (*MsgFundCommunityPoolResponse, error)
}

type msgClient struct {
	cc                           grpc.ClientConnInterface
	_SetWithdrawAddress          types.Invoker
	_WithdrawDelegatorReward     types.Invoker
	_WithdrawValidatorCommission types.Invoker
	_FundCommunityPool           types.Invoker
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc: cc}
}

func (c *msgClient) SetWithdrawAddress(ctx context.Context, in *MsgSetWithdrawAddress, opts ...grpc.CallOption) (*MsgSetWithdrawAddressResponse, error) {
	if invoker := c._SetWithdrawAddress; invoker != nil {
		var out MsgSetWithdrawAddressResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._SetWithdrawAddress, err = invokerConn.Invoker("/cosmos.distribution.v1beta1.Msg/SetWithdrawAddress")
		if err != nil {
			var out MsgSetWithdrawAddressResponse
			err = c._SetWithdrawAddress(ctx, in, &out)
			return &out, err
		}
	}
	out := new(MsgSetWithdrawAddressResponse)
	err := c.cc.Invoke(ctx, "/cosmos.distribution.v1beta1.Msg/SetWithdrawAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawDelegatorReward(ctx context.Context, in *MsgWithdrawDelegatorReward, opts ...grpc.CallOption) (*MsgWithdrawDelegatorRewardResponse, error) {
	if invoker := c._WithdrawDelegatorReward; invoker != nil {
		var out MsgWithdrawDelegatorRewardResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._WithdrawDelegatorReward, err = invokerConn.Invoker("/cosmos.distribution.v1beta1.Msg/WithdrawDelegatorReward")
		if err != nil {
			var out MsgWithdrawDelegatorRewardResponse
			err = c._WithdrawDelegatorReward(ctx, in, &out)
			return &out, err
		}
	}
	out := new(MsgWithdrawDelegatorRewardResponse)
	err := c.cc.Invoke(ctx, "/cosmos.distribution.v1beta1.Msg/WithdrawDelegatorReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawValidatorCommission(ctx context.Context, in *MsgWithdrawValidatorCommission, opts ...grpc.CallOption) (*MsgWithdrawValidatorCommissionResponse, error) {
	if invoker := c._WithdrawValidatorCommission; invoker != nil {
		var out MsgWithdrawValidatorCommissionResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._WithdrawValidatorCommission, err = invokerConn.Invoker("/cosmos.distribution.v1beta1.Msg/WithdrawValidatorCommission")
		if err != nil {
			var out MsgWithdrawValidatorCommissionResponse
			err = c._WithdrawValidatorCommission(ctx, in, &out)
			return &out, err
		}
	}
	out := new(MsgWithdrawValidatorCommissionResponse)
	err := c.cc.Invoke(ctx, "/cosmos.distribution.v1beta1.Msg/WithdrawValidatorCommission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FundCommunityPool(ctx context.Context, in *MsgFundCommunityPool, opts ...grpc.CallOption) (*MsgFundCommunityPoolResponse, error) {
	if invoker := c._FundCommunityPool; invoker != nil {
		var out MsgFundCommunityPoolResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._FundCommunityPool, err = invokerConn.Invoker("/cosmos.distribution.v1beta1.Msg/FundCommunityPool")
		if err != nil {
			var out MsgFundCommunityPoolResponse
			err = c._FundCommunityPool(ctx, in, &out)
			return &out, err
		}
	}
	out := new(MsgFundCommunityPoolResponse)
	err := c.cc.Invoke(ctx, "/cosmos.distribution.v1beta1.Msg/FundCommunityPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// SetWithdrawAddress defines a method to change the withdraw address
	// for a delegator (or validator self-delegation).
	SetWithdrawAddress(context.Context, *MsgSetWithdrawAddress) (*MsgSetWithdrawAddressResponse, error)
	// WithdrawDelegatorReward defines a method to withdraw rewards of delegator
	// from a single validator.
	WithdrawDelegatorReward(context.Context, *MsgWithdrawDelegatorReward) (*MsgWithdrawDelegatorRewardResponse, error)
	// WithdrawValidatorCommission defines a method to withdraw the
	// full commission to the validator address.
	WithdrawValidatorCommission(context.Context, *MsgWithdrawValidatorCommission) (*MsgWithdrawValidatorCommissionResponse, error)
	// FundCommunityPool defines a method to allow an account to directly
	// fund the community pool.
	FundCommunityPool(context.Context, *MsgFundCommunityPool) (*MsgFundCommunityPoolResponse, error)
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_SetWithdrawAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetWithdrawAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetWithdrawAddress(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.distribution.v1beta1.MsgSetWithdrawAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetWithdrawAddress(types.UnwrapSDKContext(ctx), req.(*MsgSetWithdrawAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawDelegatorReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawDelegatorReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawDelegatorReward(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawDelegatorReward(types.UnwrapSDKContext(ctx), req.(*MsgWithdrawDelegatorReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawValidatorCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawValidatorCommission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawValidatorCommission(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawValidatorCommission(types.UnwrapSDKContext(ctx), req.(*MsgWithdrawValidatorCommission))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FundCommunityPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFundCommunityPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FundCommunityPool(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.distribution.v1beta1.MsgFundCommunityPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FundCommunityPool(types.UnwrapSDKContext(ctx), req.(*MsgFundCommunityPool))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.distribution.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetWithdrawAddress",
			Handler:    _Msg_SetWithdrawAddress_Handler,
		},
		{
			MethodName: "WithdrawDelegatorReward",
			Handler:    _Msg_WithdrawDelegatorReward_Handler,
		},
		{
			MethodName: "WithdrawValidatorCommission",
			Handler:    _Msg_WithdrawValidatorCommission_Handler,
		},
		{
			MethodName: "FundCommunityPool",
			Handler:    _Msg_FundCommunityPool_Handler,
		},
	},
	Metadata: "cosmos/distribution/v1beta1/tx.proto",
}

const (
	MsgSetWithdrawAddressMethod          = "/cosmos.distribution.v1beta1.Msg/SetWithdrawAddress"
	MsgWithdrawDelegatorRewardMethod     = "/cosmos.distribution.v1beta1.Msg/WithdrawDelegatorReward"
	MsgWithdrawValidatorCommissionMethod = "/cosmos.distribution.v1beta1.Msg/WithdrawValidatorCommission"
	MsgFundCommunityPoolMethod           = "/cosmos.distribution.v1beta1.Msg/FundCommunityPool"
)
