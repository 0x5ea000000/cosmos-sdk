// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	types "github.com/cosmos/cosmos-sdk/types"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries params of the distribution module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ValidatorOutstandingRewards queries rewards of a validator address.
	ValidatorOutstandingRewards(ctx context.Context, in *QueryValidatorOutstandingRewardsRequest, opts ...grpc.CallOption) (*QueryValidatorOutstandingRewardsResponse, error)
	// ValidatorCommission queries accumulated commission for a validator.
	ValidatorCommission(ctx context.Context, in *QueryValidatorCommissionRequest, opts ...grpc.CallOption) (*QueryValidatorCommissionResponse, error)
	// ValidatorSlashes queries slash events of a validator.
	ValidatorSlashes(ctx context.Context, in *QueryValidatorSlashesRequest, opts ...grpc.CallOption) (*QueryValidatorSlashesResponse, error)
	// DelegationRewards queries the total rewards accrued by a delegation.
	DelegationRewards(ctx context.Context, in *QueryDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryDelegationRewardsResponse, error)
	// DelegationTotalRewards queries the total rewards accrued by a each
	// validator.
	DelegationTotalRewards(ctx context.Context, in *QueryDelegationTotalRewardsRequest, opts ...grpc.CallOption) (*QueryDelegationTotalRewardsResponse, error)
	// DelegatorValidators queries the validators of a delegator.
	DelegatorValidators(ctx context.Context, in *QueryDelegatorValidatorsRequest, opts ...grpc.CallOption) (*QueryDelegatorValidatorsResponse, error)
	// DelegatorWithdrawAddress queries withdraw address of a delegator.
	DelegatorWithdrawAddress(ctx context.Context, in *QueryDelegatorWithdrawAddressRequest, opts ...grpc.CallOption) (*QueryDelegatorWithdrawAddressResponse, error)
	// CommunityPool queries the community pool coins.
	CommunityPool(ctx context.Context, in *QueryCommunityPoolRequest, opts ...grpc.CallOption) (*QueryCommunityPoolResponse, error)
}

type queryClient struct {
	cc                           grpc.ClientConnInterface
	_Params                      types.Invoker
	_ValidatorOutstandingRewards types.Invoker
	_ValidatorCommission         types.Invoker
	_ValidatorSlashes            types.Invoker
	_DelegationRewards           types.Invoker
	_DelegationTotalRewards      types.Invoker
	_DelegatorValidators         types.Invoker
	_DelegatorWithdrawAddress    types.Invoker
	_CommunityPool               types.Invoker
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc: cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	if invoker := c._Params; invoker != nil {
		var out QueryParamsResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._Params, err = invokerConn.Invoker("/cosmos.distribution.v1beta1.QueryParams")
		if err != nil {
			var out QueryParamsResponse
			err = c._Params(ctx, in, &out)
			return &out, err
		}
	}
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/cosmos.distribution.v1beta1.QueryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorOutstandingRewards(ctx context.Context, in *QueryValidatorOutstandingRewardsRequest, opts ...grpc.CallOption) (*QueryValidatorOutstandingRewardsResponse, error) {
	if invoker := c._ValidatorOutstandingRewards; invoker != nil {
		var out QueryValidatorOutstandingRewardsResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._ValidatorOutstandingRewards, err = invokerConn.Invoker("/cosmos.distribution.v1beta1.QueryValidatorOutstandingRewards")
		if err != nil {
			var out QueryValidatorOutstandingRewardsResponse
			err = c._ValidatorOutstandingRewards(ctx, in, &out)
			return &out, err
		}
	}
	out := new(QueryValidatorOutstandingRewardsResponse)
	err := c.cc.Invoke(ctx, "/cosmos.distribution.v1beta1.QueryValidatorOutstandingRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorCommission(ctx context.Context, in *QueryValidatorCommissionRequest, opts ...grpc.CallOption) (*QueryValidatorCommissionResponse, error) {
	if invoker := c._ValidatorCommission; invoker != nil {
		var out QueryValidatorCommissionResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._ValidatorCommission, err = invokerConn.Invoker("/cosmos.distribution.v1beta1.QueryValidatorCommission")
		if err != nil {
			var out QueryValidatorCommissionResponse
			err = c._ValidatorCommission(ctx, in, &out)
			return &out, err
		}
	}
	out := new(QueryValidatorCommissionResponse)
	err := c.cc.Invoke(ctx, "/cosmos.distribution.v1beta1.QueryValidatorCommission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorSlashes(ctx context.Context, in *QueryValidatorSlashesRequest, opts ...grpc.CallOption) (*QueryValidatorSlashesResponse, error) {
	if invoker := c._ValidatorSlashes; invoker != nil {
		var out QueryValidatorSlashesResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._ValidatorSlashes, err = invokerConn.Invoker("/cosmos.distribution.v1beta1.QueryValidatorSlashes")
		if err != nil {
			var out QueryValidatorSlashesResponse
			err = c._ValidatorSlashes(ctx, in, &out)
			return &out, err
		}
	}
	out := new(QueryValidatorSlashesResponse)
	err := c.cc.Invoke(ctx, "/cosmos.distribution.v1beta1.QueryValidatorSlashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegationRewards(ctx context.Context, in *QueryDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryDelegationRewardsResponse, error) {
	if invoker := c._DelegationRewards; invoker != nil {
		var out QueryDelegationRewardsResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._DelegationRewards, err = invokerConn.Invoker("/cosmos.distribution.v1beta1.QueryDelegationRewards")
		if err != nil {
			var out QueryDelegationRewardsResponse
			err = c._DelegationRewards(ctx, in, &out)
			return &out, err
		}
	}
	out := new(QueryDelegationRewardsResponse)
	err := c.cc.Invoke(ctx, "/cosmos.distribution.v1beta1.QueryDelegationRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegationTotalRewards(ctx context.Context, in *QueryDelegationTotalRewardsRequest, opts ...grpc.CallOption) (*QueryDelegationTotalRewardsResponse, error) {
	if invoker := c._DelegationTotalRewards; invoker != nil {
		var out QueryDelegationTotalRewardsResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._DelegationTotalRewards, err = invokerConn.Invoker("/cosmos.distribution.v1beta1.QueryDelegationTotalRewards")
		if err != nil {
			var out QueryDelegationTotalRewardsResponse
			err = c._DelegationTotalRewards(ctx, in, &out)
			return &out, err
		}
	}
	out := new(QueryDelegationTotalRewardsResponse)
	err := c.cc.Invoke(ctx, "/cosmos.distribution.v1beta1.QueryDelegationTotalRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorValidators(ctx context.Context, in *QueryDelegatorValidatorsRequest, opts ...grpc.CallOption) (*QueryDelegatorValidatorsResponse, error) {
	if invoker := c._DelegatorValidators; invoker != nil {
		var out QueryDelegatorValidatorsResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._DelegatorValidators, err = invokerConn.Invoker("/cosmos.distribution.v1beta1.QueryDelegatorValidators")
		if err != nil {
			var out QueryDelegatorValidatorsResponse
			err = c._DelegatorValidators(ctx, in, &out)
			return &out, err
		}
	}
	out := new(QueryDelegatorValidatorsResponse)
	err := c.cc.Invoke(ctx, "/cosmos.distribution.v1beta1.QueryDelegatorValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorWithdrawAddress(ctx context.Context, in *QueryDelegatorWithdrawAddressRequest, opts ...grpc.CallOption) (*QueryDelegatorWithdrawAddressResponse, error) {
	if invoker := c._DelegatorWithdrawAddress; invoker != nil {
		var out QueryDelegatorWithdrawAddressResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._DelegatorWithdrawAddress, err = invokerConn.Invoker("/cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddress")
		if err != nil {
			var out QueryDelegatorWithdrawAddressResponse
			err = c._DelegatorWithdrawAddress(ctx, in, &out)
			return &out, err
		}
	}
	out := new(QueryDelegatorWithdrawAddressResponse)
	err := c.cc.Invoke(ctx, "/cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CommunityPool(ctx context.Context, in *QueryCommunityPoolRequest, opts ...grpc.CallOption) (*QueryCommunityPoolResponse, error) {
	if invoker := c._CommunityPool; invoker != nil {
		var out QueryCommunityPoolResponse
		err := invoker(ctx, in, &out)
		return &out, err
	}
	if invokerConn, ok := c.cc.(types.InvokerConn); ok {
		var err error
		c._CommunityPool, err = invokerConn.Invoker("/cosmos.distribution.v1beta1.QueryCommunityPool")
		if err != nil {
			var out QueryCommunityPoolResponse
			err = c._CommunityPool(ctx, in, &out)
			return &out, err
		}
	}
	out := new(QueryCommunityPoolResponse)
	err := c.cc.Invoke(ctx, "/cosmos.distribution.v1beta1.QueryCommunityPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries params of the distribution module.
	Params(types.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ValidatorOutstandingRewards queries rewards of a validator address.
	ValidatorOutstandingRewards(types.Context, *QueryValidatorOutstandingRewardsRequest) (*QueryValidatorOutstandingRewardsResponse, error)
	// ValidatorCommission queries accumulated commission for a validator.
	ValidatorCommission(types.Context, *QueryValidatorCommissionRequest) (*QueryValidatorCommissionResponse, error)
	// ValidatorSlashes queries slash events of a validator.
	ValidatorSlashes(types.Context, *QueryValidatorSlashesRequest) (*QueryValidatorSlashesResponse, error)
	// DelegationRewards queries the total rewards accrued by a delegation.
	DelegationRewards(types.Context, *QueryDelegationRewardsRequest) (*QueryDelegationRewardsResponse, error)
	// DelegationTotalRewards queries the total rewards accrued by a each
	// validator.
	DelegationTotalRewards(types.Context, *QueryDelegationTotalRewardsRequest) (*QueryDelegationTotalRewardsResponse, error)
	// DelegatorValidators queries the validators of a delegator.
	DelegatorValidators(types.Context, *QueryDelegatorValidatorsRequest) (*QueryDelegatorValidatorsResponse, error)
	// DelegatorWithdrawAddress queries withdraw address of a delegator.
	DelegatorWithdrawAddress(types.Context, *QueryDelegatorWithdrawAddressRequest) (*QueryDelegatorWithdrawAddressResponse, error)
	// CommunityPool queries the community pool coins.
	CommunityPool(types.Context, *QueryCommunityPoolRequest) (*QueryCommunityPoolResponse, error)
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.distribution.v1beta1.QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(types.UnwrapSDKContext(ctx), req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorOutstandingRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorOutstandingRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorOutstandingRewards(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.distribution.v1beta1.QueryValidatorOutstandingRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorOutstandingRewards(types.UnwrapSDKContext(ctx), req.(*QueryValidatorOutstandingRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorCommission(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.distribution.v1beta1.QueryValidatorCommission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorCommission(types.UnwrapSDKContext(ctx), req.(*QueryValidatorCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorSlashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorSlashesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorSlashes(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.distribution.v1beta1.QueryValidatorSlashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorSlashes(types.UnwrapSDKContext(ctx), req.(*QueryValidatorSlashesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegationRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegationRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegationRewards(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.distribution.v1beta1.QueryDelegationRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegationRewards(types.UnwrapSDKContext(ctx), req.(*QueryDelegationRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegationTotalRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegationTotalRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegationTotalRewards(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.distribution.v1beta1.QueryDelegationTotalRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegationTotalRewards(types.UnwrapSDKContext(ctx), req.(*QueryDelegationTotalRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorValidators(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.distribution.v1beta1.QueryDelegatorValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorValidators(types.UnwrapSDKContext(ctx), req.(*QueryDelegatorValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorWithdrawAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorWithdrawAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorWithdrawAddress(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorWithdrawAddress(types.UnwrapSDKContext(ctx), req.(*QueryDelegatorWithdrawAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CommunityPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommunityPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CommunityPool(types.UnwrapSDKContext(ctx), in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.distribution.v1beta1.QueryCommunityPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CommunityPool(types.UnwrapSDKContext(ctx), req.(*QueryCommunityPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.distribution.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ValidatorOutstandingRewards",
			Handler:    _Query_ValidatorOutstandingRewards_Handler,
		},
		{
			MethodName: "ValidatorCommission",
			Handler:    _Query_ValidatorCommission_Handler,
		},
		{
			MethodName: "ValidatorSlashes",
			Handler:    _Query_ValidatorSlashes_Handler,
		},
		{
			MethodName: "DelegationRewards",
			Handler:    _Query_DelegationRewards_Handler,
		},
		{
			MethodName: "DelegationTotalRewards",
			Handler:    _Query_DelegationTotalRewards_Handler,
		},
		{
			MethodName: "DelegatorValidators",
			Handler:    _Query_DelegatorValidators_Handler,
		},
		{
			MethodName: "DelegatorWithdrawAddress",
			Handler:    _Query_DelegatorWithdrawAddress_Handler,
		},
		{
			MethodName: "CommunityPool",
			Handler:    _Query_CommunityPool_Handler,
		},
	},
	Metadata: "cosmos/distribution/v1beta1/query.proto",
}

const (
	QueryParamsMethod                      = "/cosmos.distribution.v1beta1.QueryParams"
	QueryValidatorOutstandingRewardsMethod = "/cosmos.distribution.v1beta1.QueryValidatorOutstandingRewards"
	QueryValidatorCommissionMethod         = "/cosmos.distribution.v1beta1.QueryValidatorCommission"
	QueryValidatorSlashesMethod            = "/cosmos.distribution.v1beta1.QueryValidatorSlashes"
	QueryDelegationRewardsMethod           = "/cosmos.distribution.v1beta1.QueryDelegationRewards"
	QueryDelegationTotalRewardsMethod      = "/cosmos.distribution.v1beta1.QueryDelegationTotalRewards"
	QueryDelegatorValidatorsMethod         = "/cosmos.distribution.v1beta1.QueryDelegatorValidators"
	QueryDelegatorWithdrawAddressMethod    = "/cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddress"
	QueryCommunityPoolMethod               = "/cosmos.distribution.v1beta1.QueryCommunityPool"
)
