// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/bank/v1beta1/module.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Module struct {
	SendDenyList  []string              `protobuf:"bytes,1,rep,name=send_deny_list,json=sendDenyList,proto3" json:"send_deny_list,omitempty"`
	DenomManagers map[string]*types.Any `protobuf:"bytes,3,rep,name=denom_managers,json=denomManagers,proto3" json:"denom_managers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Module) Reset()         { *m = Module{} }
func (m *Module) String() string { return proto.CompactTextString(m) }
func (*Module) ProtoMessage()    {}
func (*Module) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d644efccd29e8d3, []int{0}
}
func (m *Module) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Module) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Module.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Module) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Module.Merge(m, src)
}
func (m *Module) XXX_Size() int {
	return m.Size()
}
func (m *Module) XXX_DiscardUnknown() {
	xxx_messageInfo_Module.DiscardUnknown(m)
}

var xxx_messageInfo_Module proto.InternalMessageInfo

func (m *Module) GetSendDenyList() []string {
	if m != nil {
		return m.SendDenyList
	}
	return nil
}

func (m *Module) GetDenomManagers() map[string]*types.Any {
	if m != nil {
		return m.DenomManagers
	}
	return nil
}

func init() {
	proto.RegisterType((*Module)(nil), "cosmos.bank.v1beta1.Module")
	proto.RegisterMapType((map[string]*types.Any)(nil), "cosmos.bank.v1beta1.Module.DenomManagersEntry")
}

func init() { proto.RegisterFile("cosmos/bank/v1beta1/module.proto", fileDescriptor_2d644efccd29e8d3) }

var fileDescriptor_2d644efccd29e8d3 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x1c, 0xc5, 0x97, 0x15, 0x07, 0xcb, 0x74, 0x48, 0xf4, 0x50, 0x77, 0x08, 0x45, 0x3c, 0x54, 0xc1,
	0x84, 0xcd, 0x8b, 0x78, 0x53, 0xe7, 0xcd, 0x5d, 0x0a, 0x7a, 0xf0, 0x32, 0xd2, 0x25, 0xd6, 0xb1,
	0x36, 0x19, 0x4d, 0x3a, 0xcc, 0xb7, 0xf0, 0x63, 0x79, 0xdc, 0xd1, 0x8b, 0x20, 0xed, 0x17, 0x91,
	0x36, 0x15, 0x04, 0x3d, 0x25, 0x3c, 0x7e, 0xef, 0xfd, 0x79, 0x0f, 0x06, 0x0b, 0xa5, 0x33, 0xa5,
	0x69, 0xcc, 0xe4, 0x8a, 0x6e, 0xc6, 0xb1, 0x30, 0x6c, 0x4c, 0x33, 0xc5, 0x8b, 0x54, 0x90, 0x75,
	0xae, 0x8c, 0x42, 0x07, 0x8e, 0x20, 0x35, 0x41, 0x5a, 0x62, 0x74, 0x94, 0x28, 0x95, 0xa4, 0x82,
	0x36, 0x48, 0x5c, 0x3c, 0x53, 0x26, 0xad, 0xe3, 0x8f, 0x3f, 0x01, 0xec, 0xcd, 0x9a, 0x00, 0x74,
	0x02, 0x87, 0x5a, 0x48, 0x3e, 0xe7, 0x42, 0xda, 0x79, 0xba, 0xd4, 0xc6, 0x07, 0x81, 0x17, 0xf6,
	0xa3, 0xdd, 0x5a, 0x9d, 0x0a, 0x69, 0xef, 0x97, 0xda, 0xa0, 0x07, 0x38, 0xe4, 0x42, 0xaa, 0x6c,
	0x9e, 0x31, 0xc9, 0x12, 0x91, 0x6b, 0xdf, 0x0b, 0xbc, 0x70, 0x30, 0x21, 0xe4, 0x9f, 0xcb, 0xc4,
	0x45, 0x93, 0x69, 0xed, 0x98, 0xb5, 0x86, 0x3b, 0x69, 0x72, 0x1b, 0xed, 0xf1, 0xdf, 0xda, 0xe8,
	0x11, 0xa2, 0xbf, 0x10, 0xda, 0x87, 0xde, 0x4a, 0x58, 0x1f, 0x04, 0x20, 0xec, 0x47, 0xf5, 0x17,
	0x9d, 0xc1, 0x9d, 0x0d, 0x4b, 0x0b, 0xe1, 0x77, 0x03, 0x10, 0x0e, 0x26, 0x87, 0xc4, 0x55, 0x23,
	0x3f, 0xd5, 0xc8, 0xb5, 0xb4, 0x91, 0x43, 0xae, 0xba, 0x97, 0xe0, 0xe6, 0xf6, 0xbd, 0xc4, 0x60,
	0x5b, 0x62, 0xf0, 0x55, 0x62, 0xf0, 0x56, 0xe1, 0xce, 0xb6, 0xc2, 0x9d, 0x8f, 0x0a, 0x77, 0x9e,
	0x4e, 0x93, 0xa5, 0x79, 0x29, 0x62, 0xb2, 0x50, 0x19, 0x6d, 0x67, 0x75, 0xcf, 0xb9, 0xe6, 0x2b,
	0xfa, 0xea, 0x36, 0x36, 0x76, 0x2d, 0x74, 0xdc, 0x6b, 0xd2, 0x2f, 0xbe, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x00, 0x18, 0xe7, 0xe9, 0x7f, 0x01, 0x00, 0x00,
}

func (m *Module) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Module) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Module) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomManagers) > 0 {
		for k := range m.DenomManagers {
			v := m.DenomManagers[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintModule(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintModule(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintModule(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SendDenyList) > 0 {
		for iNdEx := len(m.SendDenyList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SendDenyList[iNdEx])
			copy(dAtA[i:], m.SendDenyList[iNdEx])
			i = encodeVarintModule(dAtA, i, uint64(len(m.SendDenyList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintModule(dAtA []byte, offset int, v uint64) int {
	offset -= sovModule(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Module) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SendDenyList) > 0 {
		for _, s := range m.SendDenyList {
			l = len(s)
			n += 1 + l + sovModule(uint64(l))
		}
	}
	if len(m.DenomManagers) > 0 {
		for k, v := range m.DenomManagers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovModule(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovModule(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovModule(uint64(mapEntrySize))
		}
	}
	return n
}

func sovModule(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModule(x uint64) (n int) {
	return sovModule(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Module) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Module: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Module: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendDenyList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendDenyList = append(m.SendDenyList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomManagers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModule
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModule
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DenomManagers == nil {
				m.DenomManagers = make(map[string]*types.Any)
			}
			var mapkey string
			var mapvalue *types.Any
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModule
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModule
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthModule
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthModule
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModule
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthModule
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthModule
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.Any{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipModule(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthModule
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DenomManagers[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModule(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModule
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModule
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModule
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModule
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModule        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModule          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModule = fmt.Errorf("proto: unexpected end of group")
)
