// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/bank/v1beta1/denom_manager.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OnMintRequest struct {
	Minter   string `protobuf:"bytes,1,opt,name=minter,proto3" json:"minter,omitempty"`
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Denom    string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount   string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *OnMintRequest) Reset()         { *m = OnMintRequest{} }
func (m *OnMintRequest) String() string { return proto.CompactTextString(m) }
func (*OnMintRequest) ProtoMessage()    {}
func (*OnMintRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee4f62ba26b381ad, []int{0}
}
func (m *OnMintRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnMintRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnMintRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnMintRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnMintRequest.Merge(m, src)
}
func (m *OnMintRequest) XXX_Size() int {
	return m.Size()
}
func (m *OnMintRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OnMintRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OnMintRequest proto.InternalMessageInfo

func (m *OnMintRequest) GetMinter() string {
	if m != nil {
		return m.Minter
	}
	return ""
}

func (m *OnMintRequest) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *OnMintRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *OnMintRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type OnMintResponse struct {
}

func (m *OnMintResponse) Reset()         { *m = OnMintResponse{} }
func (m *OnMintResponse) String() string { return proto.CompactTextString(m) }
func (*OnMintResponse) ProtoMessage()    {}
func (*OnMintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee4f62ba26b381ad, []int{1}
}
func (m *OnMintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnMintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnMintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnMintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnMintResponse.Merge(m, src)
}
func (m *OnMintResponse) XXX_Size() int {
	return m.Size()
}
func (m *OnMintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OnMintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OnMintResponse proto.InternalMessageInfo

type OnSendRequest struct {
	Sender   string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Denom    string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount   string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *OnSendRequest) Reset()         { *m = OnSendRequest{} }
func (m *OnSendRequest) String() string { return proto.CompactTextString(m) }
func (*OnSendRequest) ProtoMessage()    {}
func (*OnSendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee4f62ba26b381ad, []int{2}
}
func (m *OnSendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnSendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnSendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnSendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnSendRequest.Merge(m, src)
}
func (m *OnSendRequest) XXX_Size() int {
	return m.Size()
}
func (m *OnSendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OnSendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OnSendRequest proto.InternalMessageInfo

func (m *OnSendRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *OnSendRequest) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *OnSendRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *OnSendRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type OnSendResponse struct {
}

func (m *OnSendResponse) Reset()         { *m = OnSendResponse{} }
func (m *OnSendResponse) String() string { return proto.CompactTextString(m) }
func (*OnSendResponse) ProtoMessage()    {}
func (*OnSendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee4f62ba26b381ad, []int{3}
}
func (m *OnSendResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnSendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnSendResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnSendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnSendResponse.Merge(m, src)
}
func (m *OnSendResponse) XXX_Size() int {
	return m.Size()
}
func (m *OnSendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OnSendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OnSendResponse proto.InternalMessageInfo

type OnBurnRequest struct {
	Burner string `protobuf:"bytes,1,opt,name=burner,proto3" json:"burner,omitempty"`
	Denom  string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *OnBurnRequest) Reset()         { *m = OnBurnRequest{} }
func (m *OnBurnRequest) String() string { return proto.CompactTextString(m) }
func (*OnBurnRequest) ProtoMessage()    {}
func (*OnBurnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee4f62ba26b381ad, []int{4}
}
func (m *OnBurnRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnBurnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnBurnRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnBurnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnBurnRequest.Merge(m, src)
}
func (m *OnBurnRequest) XXX_Size() int {
	return m.Size()
}
func (m *OnBurnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OnBurnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OnBurnRequest proto.InternalMessageInfo

func (m *OnBurnRequest) GetBurner() string {
	if m != nil {
		return m.Burner
	}
	return ""
}

func (m *OnBurnRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *OnBurnRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type OnBurnResponse struct {
}

func (m *OnBurnResponse) Reset()         { *m = OnBurnResponse{} }
func (m *OnBurnResponse) String() string { return proto.CompactTextString(m) }
func (*OnBurnResponse) ProtoMessage()    {}
func (*OnBurnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee4f62ba26b381ad, []int{5}
}
func (m *OnBurnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OnBurnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OnBurnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OnBurnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnBurnResponse.Merge(m, src)
}
func (m *OnBurnResponse) XXX_Size() int {
	return m.Size()
}
func (m *OnBurnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OnBurnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OnBurnResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*OnMintRequest)(nil), "cosmos.bank.v1beta1.OnMintRequest")
	proto.RegisterType((*OnMintResponse)(nil), "cosmos.bank.v1beta1.OnMintResponse")
	proto.RegisterType((*OnSendRequest)(nil), "cosmos.bank.v1beta1.OnSendRequest")
	proto.RegisterType((*OnSendResponse)(nil), "cosmos.bank.v1beta1.OnSendResponse")
	proto.RegisterType((*OnBurnRequest)(nil), "cosmos.bank.v1beta1.OnBurnRequest")
	proto.RegisterType((*OnBurnResponse)(nil), "cosmos.bank.v1beta1.OnBurnResponse")
}

func init() {
	proto.RegisterFile("cosmos/bank/v1beta1/denom_manager.proto", fileDescriptor_ee4f62ba26b381ad)
}

var fileDescriptor_ee4f62ba26b381ad = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x9b, 0x16, 0x2a, 0xb0, 0x00, 0xa1, 0x80, 0x50, 0xd4, 0x21, 0x42, 0x65, 0x00, 0x06,
	0x1c, 0x15, 0xde, 0xa0, 0xb0, 0x56, 0x88, 0x22, 0x16, 0x16, 0x94, 0x34, 0xa7, 0x12, 0x55, 0x3e,
	0xb7, 0xb6, 0x53, 0xc1, 0x13, 0xb0, 0xf2, 0x58, 0x8c, 0x1d, 0x19, 0x51, 0xfb, 0x22, 0xc8, 0xb9,
	0x40, 0x8d, 0x68, 0x98, 0x98, 0xa2, 0x5f, 0xbe, 0x7c, 0xff, 0xef, 0xdf, 0xc7, 0x8e, 0x07, 0x52,
	0x0b, 0xa9, 0xa3, 0x24, 0xc6, 0x51, 0x34, 0xed, 0x24, 0x60, 0xe2, 0x4e, 0x94, 0x02, 0x4a, 0xf1,
	0x20, 0x62, 0x8c, 0x87, 0xa0, 0xf8, 0x58, 0x49, 0x23, 0xfd, 0x3d, 0x1a, 0xe4, 0x76, 0x90, 0x97,
	0x83, 0xed, 0x09, 0xdb, 0xbe, 0xc6, 0x5e, 0x86, 0xa6, 0x0f, 0x93, 0x1c, 0xb4, 0xf1, 0x0f, 0x58,
	0x53, 0x64, 0x68, 0x40, 0x05, 0xde, 0xa1, 0x77, 0xb2, 0xd9, 0x2f, 0x95, 0xdf, 0x62, 0x1b, 0x0a,
	0x06, 0x90, 0x4d, 0x41, 0x05, 0xf5, 0xe2, 0xe4, 0x5b, 0xfb, 0xfb, 0x6c, 0xbd, 0x30, 0x0c, 0x1a,
	0xc5, 0x01, 0x09, 0x4b, 0x8a, 0x85, 0xcc, 0xd1, 0x04, 0x6b, 0x44, 0x22, 0xd5, 0xde, 0x65, 0x3b,
	0x5f, 0x96, 0x7a, 0x2c, 0x51, 0x03, 0x85, 0xb8, 0x05, 0x4c, 0x9d, 0x10, 0x1a, 0x30, 0x5d, 0x86,
	0x20, 0xf5, 0xdf, 0x21, 0xc8, 0xb2, 0x0c, 0x71, 0x67, 0x43, 0x74, 0x73, 0x85, 0x4e, 0x88, 0x24,
	0x57, 0xb8, 0x0c, 0x41, 0x6a, 0x69, 0x54, 0x5f, 0x6d, 0xd4, 0xf8, 0x6d, 0x44, 0x58, 0x32, 0x3a,
	0x7f, 0xa9, 0xb3, 0xad, 0x2b, 0xfb, 0x4f, 0x8f, 0x9e, 0xc7, 0xbf, 0x61, 0x4d, 0x2a, 0xc4, 0x6f,
	0xf3, 0x15, 0x6f, 0xc4, 0x7f, 0x3c, 0x50, 0xeb, 0xe8, 0xcf, 0x19, 0xf2, 0x20, 0xa4, 0xbd, 0x5e,
	0x25, 0xd2, 0xa9, 0xbb, 0x12, 0xe9, 0xf6, 0x43, 0x48, 0x7b, 0x91, 0x4a, 0xa4, 0x53, 0x5e, 0x25,
	0xd2, 0x6d, 0xa2, 0x7b, 0xf9, 0x36, 0x0f, 0xbd, 0xd9, 0x3c, 0xf4, 0x3e, 0xe6, 0xa1, 0xf7, 0xba,
	0x08, 0x6b, 0xb3, 0x45, 0x58, 0x7b, 0x5f, 0x84, 0xb5, 0xfb, 0xd3, 0x61, 0x66, 0x1e, 0xf3, 0x84,
	0x0f, 0xa4, 0x88, 0xca, 0xfd, 0xa6, 0xcf, 0x99, 0x4e, 0x47, 0xd1, 0x13, 0x2d, 0xbb, 0x79, 0x1e,
	0x83, 0x4e, 0x9a, 0xc5, 0x76, 0x5f, 0x7c, 0x06, 0x00, 0x00, 0xff, 0xff, 0x71, 0xec, 0x5d, 0xc9,
	0x08, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DenomManagerClient is the client API for DenomManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DenomManagerClient interface {
	OnMint(ctx context.Context, in *OnMintRequest, opts ...grpc.CallOption) (*OnMintResponse, error)
	OnSend(ctx context.Context, in *OnSendRequest, opts ...grpc.CallOption) (*OnSendResponse, error)
	OnBurn(ctx context.Context, in *OnBurnRequest, opts ...grpc.CallOption) (*OnBurnResponse, error)
}

type denomManagerClient struct {
	cc grpc1.ClientConn
}

func NewDenomManagerClient(cc grpc1.ClientConn) DenomManagerClient {
	return &denomManagerClient{cc}
}

func (c *denomManagerClient) OnMint(ctx context.Context, in *OnMintRequest, opts ...grpc.CallOption) (*OnMintResponse, error) {
	out := new(OnMintResponse)
	err := c.cc.Invoke(ctx, "/cosmos.bank.v1beta1.DenomManager/OnMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *denomManagerClient) OnSend(ctx context.Context, in *OnSendRequest, opts ...grpc.CallOption) (*OnSendResponse, error) {
	out := new(OnSendResponse)
	err := c.cc.Invoke(ctx, "/cosmos.bank.v1beta1.DenomManager/OnSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *denomManagerClient) OnBurn(ctx context.Context, in *OnBurnRequest, opts ...grpc.CallOption) (*OnBurnResponse, error) {
	out := new(OnBurnResponse)
	err := c.cc.Invoke(ctx, "/cosmos.bank.v1beta1.DenomManager/OnBurn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DenomManagerServer is the server API for DenomManager service.
type DenomManagerServer interface {
	OnMint(context.Context, *OnMintRequest) (*OnMintResponse, error)
	OnSend(context.Context, *OnSendRequest) (*OnSendResponse, error)
	OnBurn(context.Context, *OnBurnRequest) (*OnBurnResponse, error)
}

// UnimplementedDenomManagerServer can be embedded to have forward compatible implementations.
type UnimplementedDenomManagerServer struct {
}

func (*UnimplementedDenomManagerServer) OnMint(ctx context.Context, req *OnMintRequest) (*OnMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMint not implemented")
}
func (*UnimplementedDenomManagerServer) OnSend(ctx context.Context, req *OnSendRequest) (*OnSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnSend not implemented")
}
func (*UnimplementedDenomManagerServer) OnBurn(ctx context.Context, req *OnBurnRequest) (*OnBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnBurn not implemented")
}

func RegisterDenomManagerServer(s grpc1.Server, srv DenomManagerServer) {
	s.RegisterService(&_DenomManager_serviceDesc, srv)
}

func _DenomManager_OnMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnMintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DenomManagerServer).OnMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.bank.v1beta1.DenomManager/OnMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DenomManagerServer).OnMint(ctx, req.(*OnMintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DenomManager_OnSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DenomManagerServer).OnSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.bank.v1beta1.DenomManager/OnSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DenomManagerServer).OnSend(ctx, req.(*OnSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DenomManager_OnBurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnBurnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DenomManagerServer).OnBurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.bank.v1beta1.DenomManager/OnBurn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DenomManagerServer).OnBurn(ctx, req.(*OnBurnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DenomManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.bank.v1beta1.DenomManager",
	HandlerType: (*DenomManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnMint",
			Handler:    _DenomManager_OnMint_Handler,
		},
		{
			MethodName: "OnSend",
			Handler:    _DenomManager_OnSend_Handler,
		},
		{
			MethodName: "OnBurn",
			Handler:    _DenomManager_OnBurn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/bank/v1beta1/denom_manager.proto",
}

func (m *OnMintRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnMintRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnMintRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintDenomManager(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDenomManager(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintDenomManager(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Minter) > 0 {
		i -= len(m.Minter)
		copy(dAtA[i:], m.Minter)
		i = encodeVarintDenomManager(dAtA, i, uint64(len(m.Minter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OnMintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnMintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnMintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OnSendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnSendRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnSendRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintDenomManager(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDenomManager(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintDenomManager(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintDenomManager(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OnSendResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnSendResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnSendResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OnBurnRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnBurnRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnBurnRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintDenomManager(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDenomManager(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Burner) > 0 {
		i -= len(m.Burner)
		copy(dAtA[i:], m.Burner)
		i = encodeVarintDenomManager(dAtA, i, uint64(len(m.Burner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OnBurnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OnBurnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OnBurnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintDenomManager(dAtA []byte, offset int, v uint64) int {
	offset -= sovDenomManager(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OnMintRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Minter)
	if l > 0 {
		n += 1 + l + sovDenomManager(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovDenomManager(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDenomManager(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovDenomManager(uint64(l))
	}
	return n
}

func (m *OnMintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OnSendRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovDenomManager(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovDenomManager(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDenomManager(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovDenomManager(uint64(l))
	}
	return n
}

func (m *OnSendResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OnBurnRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Burner)
	if l > 0 {
		n += 1 + l + sovDenomManager(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDenomManager(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovDenomManager(uint64(l))
	}
	return n
}

func (m *OnBurnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovDenomManager(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDenomManager(x uint64) (n int) {
	return sovDenomManager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OnMintRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDenomManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnMintRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnMintRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDenomManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDenomManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDenomManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Minter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDenomManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDenomManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDenomManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDenomManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDenomManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDenomManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDenomManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDenomManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDenomManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDenomManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDenomManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnMintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDenomManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnMintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnMintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDenomManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDenomManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnSendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDenomManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnSendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnSendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDenomManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDenomManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDenomManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDenomManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDenomManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDenomManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDenomManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDenomManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDenomManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDenomManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDenomManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDenomManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDenomManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDenomManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnSendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDenomManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnSendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnSendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDenomManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDenomManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnBurnRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDenomManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnBurnRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnBurnRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDenomManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDenomManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDenomManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Burner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDenomManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDenomManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDenomManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDenomManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDenomManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDenomManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDenomManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDenomManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OnBurnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDenomManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OnBurnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OnBurnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDenomManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDenomManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDenomManager(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDenomManager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDenomManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDenomManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDenomManager
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDenomManager
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDenomManager
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDenomManager        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDenomManager          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDenomManager = fmt.Errorf("proto: unexpected end of group")
)
