// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/canonical-proto3-json/test.proto

package canonical_proto3_json

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EnumTest int32

const (
	EnumTest_TEST_1 EnumTest = 0
	EnumTest_TEST_2 EnumTest = 1
	EnumTest_TEST_3 EnumTest = 2
)

var EnumTest_name = map[int32]string{
	0: "TEST_1",
	1: "TEST_2",
	2: "TEST_3",
}

var EnumTest_value = map[string]int32{
	"TEST_1": 0,
	"TEST_2": 1,
	"TEST_3": 2,
}

func (x EnumTest) String() string {
	return proto.EnumName(EnumTest_name, int32(x))
}

func (EnumTest) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9453319e599ce637, []int{0}
}

type TimeTest struct {
	TestTimestamp *time.Time `protobuf:"bytes,1,opt,name=test_timestamp,json=testTimestamp,proto3,stdtime" json:"test_timestamp,omitempty"`
}

func (m *TimeTest) Reset()         { *m = TimeTest{} }
func (m *TimeTest) String() string { return proto.CompactTextString(m) }
func (*TimeTest) ProtoMessage()    {}
func (*TimeTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9453319e599ce637, []int{0}
}
func (m *TimeTest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeTest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeTest.Merge(m, src)
}
func (m *TimeTest) XXX_Size() int {
	return m.Size()
}
func (m *TimeTest) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeTest.DiscardUnknown(m)
}

var xxx_messageInfo_TimeTest proto.InternalMessageInfo

func (m *TimeTest) GetTestTimestamp() *time.Time {
	if m != nil {
		return m.TestTimestamp
	}
	return nil
}

type CompleteTest struct {
	NumericalTest       *CompleteTest_NumericalTest `protobuf:"bytes,1,opt,name=numerical_test,json=numericalTest,proto3" json:"numerical_test,omitempty"`
	TestEnum            EnumTest                    `protobuf:"varint,2,opt,name=test_enum,json=testEnum,proto3,enum=cosmos.main.EnumTest" json:"test_enum,omitempty"`
	TestMap             map[int32]int64             `protobuf:"bytes,3,rep,name=test_map,json=testMap,proto3" json:"test_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TestTimeMap         map[int32]*types.Duration   `protobuf:"bytes,4,rep,name=test_time_map,json=testTimeMap,proto3" json:"test_time_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TestRepeatedFixed32 []uint32                    `protobuf:"fixed32,5,rep,packed,name=test_repeated_fixed32,json=testRepeatedFixed32,proto3" json:"test_repeated_fixed32,omitempty"`
	TestBool            bool                        `protobuf:"varint,6,opt,name=test_bool,json=testBool,proto3" json:"test_bool,omitempty"`
	TestString          string                      `protobuf:"bytes,7,opt,name=test_string,json=testString,proto3" json:"test_string,omitempty"`
	TestBytes           []byte                      `protobuf:"bytes,8,opt,name=test_bytes,json=testBytes,proto3" json:"test_bytes,omitempty"`
	TestAny             *types1.Any                 `protobuf:"bytes,9,opt,name=test_any,json=testAny,proto3" json:"test_any,omitempty"`
	TestTimestamp       *types.Timestamp            `protobuf:"bytes,10,opt,name=test_timestamp,json=testTimestamp,proto3" json:"test_timestamp,omitempty"`
	TestStdTimestamp    *time.Time                  `protobuf:"bytes,11,opt,name=test_std_timestamp,json=testStdTimestamp,proto3,stdtime" json:"test_std_timestamp,omitempty"`
	TestDuration        *types.Duration             `protobuf:"bytes,12,opt,name=test_duration,json=testDuration,proto3" json:"test_duration,omitempty"`
	TestStruct          *types.Struct               `protobuf:"bytes,13,opt,name=test_struct,json=testStruct,proto3" json:"test_struct,omitempty"`
	TestBoolValue       *types.BoolValue            `protobuf:"bytes,14,opt,name=test_bool_value,json=testBoolValue,proto3" json:"test_bool_value,omitempty"`
	TestBytesValue      *types.BytesValue           `protobuf:"bytes,15,opt,name=test_bytes_value,json=testBytesValue,proto3" json:"test_bytes_value,omitempty"`
	TestDoubleValue     *types.DoubleValue          `protobuf:"bytes,16,opt,name=test_double_value,json=testDoubleValue,proto3" json:"test_double_value,omitempty"`
	TestFloatValue      *types.FloatValue           `protobuf:"bytes,17,opt,name=test_float_value,json=testFloatValue,proto3" json:"test_float_value,omitempty"`
	TestInt32Value      *types.Int32Value           `protobuf:"bytes,18,opt,name=test_int32_value,json=testInt32Value,proto3" json:"test_int32_value,omitempty"`
	TestInt64Value      *types.Int64Value           `protobuf:"bytes,19,opt,name=test_int64_value,json=testInt64Value,proto3" json:"test_int64_value,omitempty"`
	TestStringValue     *types.StringValue          `protobuf:"bytes,20,opt,name=test_string_value,json=testStringValue,proto3" json:"test_string_value,omitempty"`
	TestUint32Value     *types.UInt32Value          `protobuf:"bytes,21,opt,name=test_uint32_value,json=testUint32Value,proto3" json:"test_uint32_value,omitempty"`
	TestUint64Value     *types.UInt64Value          `protobuf:"bytes,22,opt,name=test_uint64_value,json=testUint64Value,proto3" json:"test_uint64_value,omitempty"`
	TestFieldMask       *types.FieldMask            `protobuf:"bytes,23,opt,name=test_field_mask,json=testFieldMask,proto3" json:"test_field_mask,omitempty"`
	TestEmpty           *types.Empty                `protobuf:"bytes,24,opt,name=test_empty,json=testEmpty,proto3" json:"test_empty,omitempty"`
}

func (m *CompleteTest) Reset()         { *m = CompleteTest{} }
func (m *CompleteTest) String() string { return proto.CompactTextString(m) }
func (*CompleteTest) ProtoMessage()    {}
func (*CompleteTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9453319e599ce637, []int{1}
}
func (m *CompleteTest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompleteTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompleteTest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompleteTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompleteTest.Merge(m, src)
}
func (m *CompleteTest) XXX_Size() int {
	return m.Size()
}
func (m *CompleteTest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompleteTest.DiscardUnknown(m)
}

var xxx_messageInfo_CompleteTest proto.InternalMessageInfo

func (m *CompleteTest) GetNumericalTest() *CompleteTest_NumericalTest {
	if m != nil {
		return m.NumericalTest
	}
	return nil
}

func (m *CompleteTest) GetTestEnum() EnumTest {
	if m != nil {
		return m.TestEnum
	}
	return EnumTest_TEST_1
}

func (m *CompleteTest) GetTestMap() map[int32]int64 {
	if m != nil {
		return m.TestMap
	}
	return nil
}

func (m *CompleteTest) GetTestTimeMap() map[int32]*types.Duration {
	if m != nil {
		return m.TestTimeMap
	}
	return nil
}

func (m *CompleteTest) GetTestRepeatedFixed32() []uint32 {
	if m != nil {
		return m.TestRepeatedFixed32
	}
	return nil
}

func (m *CompleteTest) GetTestBool() bool {
	if m != nil {
		return m.TestBool
	}
	return false
}

func (m *CompleteTest) GetTestString() string {
	if m != nil {
		return m.TestString
	}
	return ""
}

func (m *CompleteTest) GetTestBytes() []byte {
	if m != nil {
		return m.TestBytes
	}
	return nil
}

func (m *CompleteTest) GetTestAny() *types1.Any {
	if m != nil {
		return m.TestAny
	}
	return nil
}

func (m *CompleteTest) GetTestTimestamp() *types.Timestamp {
	if m != nil {
		return m.TestTimestamp
	}
	return nil
}

func (m *CompleteTest) GetTestStdTimestamp() *time.Time {
	if m != nil {
		return m.TestStdTimestamp
	}
	return nil
}

func (m *CompleteTest) GetTestDuration() *types.Duration {
	if m != nil {
		return m.TestDuration
	}
	return nil
}

func (m *CompleteTest) GetTestStruct() *types.Struct {
	if m != nil {
		return m.TestStruct
	}
	return nil
}

func (m *CompleteTest) GetTestBoolValue() *types.BoolValue {
	if m != nil {
		return m.TestBoolValue
	}
	return nil
}

func (m *CompleteTest) GetTestBytesValue() *types.BytesValue {
	if m != nil {
		return m.TestBytesValue
	}
	return nil
}

func (m *CompleteTest) GetTestDoubleValue() *types.DoubleValue {
	if m != nil {
		return m.TestDoubleValue
	}
	return nil
}

func (m *CompleteTest) GetTestFloatValue() *types.FloatValue {
	if m != nil {
		return m.TestFloatValue
	}
	return nil
}

func (m *CompleteTest) GetTestInt32Value() *types.Int32Value {
	if m != nil {
		return m.TestInt32Value
	}
	return nil
}

func (m *CompleteTest) GetTestInt64Value() *types.Int64Value {
	if m != nil {
		return m.TestInt64Value
	}
	return nil
}

func (m *CompleteTest) GetTestStringValue() *types.StringValue {
	if m != nil {
		return m.TestStringValue
	}
	return nil
}

func (m *CompleteTest) GetTestUint32Value() *types.UInt32Value {
	if m != nil {
		return m.TestUint32Value
	}
	return nil
}

func (m *CompleteTest) GetTestUint64Value() *types.UInt64Value {
	if m != nil {
		return m.TestUint64Value
	}
	return nil
}

func (m *CompleteTest) GetTestFieldMask() *types.FieldMask {
	if m != nil {
		return m.TestFieldMask
	}
	return nil
}

func (m *CompleteTest) GetTestEmpty() *types.Empty {
	if m != nil {
		return m.TestEmpty
	}
	return nil
}

type CompleteTest_NumericalTest struct {
	TestInt32   int32   `protobuf:"varint,1,opt,name=test_int32,json=testInt32,proto3" json:"test_int32,omitempty"`
	TestFixed32 uint32  `protobuf:"fixed32,2,opt,name=test_fixed32,json=testFixed32,proto3" json:"test_fixed32,omitempty"`
	TestUint32  uint32  `protobuf:"varint,3,opt,name=test_uint32,json=testUint32,proto3" json:"test_uint32,omitempty"`
	TestInt64   int64   `protobuf:"varint,4,opt,name=test_int64,json=testInt64,proto3" json:"test_int64,omitempty"`
	TestFixed64 uint64  `protobuf:"fixed64,5,opt,name=test_fixed64,json=testFixed64,proto3" json:"test_fixed64,omitempty"`
	TestUint64  uint64  `protobuf:"varint,6,opt,name=test_uint64,json=testUint64,proto3" json:"test_uint64,omitempty"`
	TestFloat   float32 `protobuf:"fixed32,7,opt,name=test_float,json=testFloat,proto3" json:"test_float,omitempty"`
	TestDouble  float64 `protobuf:"fixed64,8,opt,name=test_double,json=testDouble,proto3" json:"test_double,omitempty"`
}

func (m *CompleteTest_NumericalTest) Reset()         { *m = CompleteTest_NumericalTest{} }
func (m *CompleteTest_NumericalTest) String() string { return proto.CompactTextString(m) }
func (*CompleteTest_NumericalTest) ProtoMessage()    {}
func (*CompleteTest_NumericalTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9453319e599ce637, []int{1, 2}
}
func (m *CompleteTest_NumericalTest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompleteTest_NumericalTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CompleteTest_NumericalTest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CompleteTest_NumericalTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompleteTest_NumericalTest.Merge(m, src)
}
func (m *CompleteTest_NumericalTest) XXX_Size() int {
	return m.Size()
}
func (m *CompleteTest_NumericalTest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompleteTest_NumericalTest.DiscardUnknown(m)
}

var xxx_messageInfo_CompleteTest_NumericalTest proto.InternalMessageInfo

func (m *CompleteTest_NumericalTest) GetTestInt32() int32 {
	if m != nil {
		return m.TestInt32
	}
	return 0
}

func (m *CompleteTest_NumericalTest) GetTestFixed32() uint32 {
	if m != nil {
		return m.TestFixed32
	}
	return 0
}

func (m *CompleteTest_NumericalTest) GetTestUint32() uint32 {
	if m != nil {
		return m.TestUint32
	}
	return 0
}

func (m *CompleteTest_NumericalTest) GetTestInt64() int64 {
	if m != nil {
		return m.TestInt64
	}
	return 0
}

func (m *CompleteTest_NumericalTest) GetTestFixed64() uint64 {
	if m != nil {
		return m.TestFixed64
	}
	return 0
}

func (m *CompleteTest_NumericalTest) GetTestUint64() uint64 {
	if m != nil {
		return m.TestUint64
	}
	return 0
}

func (m *CompleteTest_NumericalTest) GetTestFloat() float32 {
	if m != nil {
		return m.TestFloat
	}
	return 0
}

func (m *CompleteTest_NumericalTest) GetTestDouble() float64 {
	if m != nil {
		return m.TestDouble
	}
	return 0
}

func init() {
	proto.RegisterEnum("cosmos.main.EnumTest", EnumTest_name, EnumTest_value)
	proto.RegisterType((*TimeTest)(nil), "cosmos.main.TimeTest")
	proto.RegisterType((*CompleteTest)(nil), "cosmos.main.CompleteTest")
	proto.RegisterMapType((map[int32]int64)(nil), "cosmos.main.CompleteTest.TestMapEntry")
	proto.RegisterMapType((map[int32]*types.Duration)(nil), "cosmos.main.CompleteTest.TestTimeMapEntry")
	proto.RegisterType((*CompleteTest_NumericalTest)(nil), "cosmos.main.CompleteTest.NumericalTest")
}

func init() {
	proto.RegisterFile("cosmos/canonical-proto3-json/test.proto", fileDescriptor_9453319e599ce637)
}

var fileDescriptor_9453319e599ce637 = []byte{
	// 964 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x96, 0xcb, 0x6e, 0xdb, 0x46,
	0x17, 0x80, 0x4d, 0xc9, 0x17, 0x69, 0x74, 0xb1, 0x32, 0xb1, 0x93, 0x89, 0x9c, 0x5f, 0xe6, 0x9f,
	0x45, 0x43, 0x04, 0x30, 0x85, 0xd2, 0xaa, 0x10, 0x64, 0x51, 0xc0, 0x6a, 0xe5, 0xb6, 0x40, 0xe3,
	0x05, 0xad, 0x14, 0x68, 0x37, 0x02, 0x25, 0x8d, 0x55, 0xd6, 0x24, 0x87, 0x20, 0x87, 0x6d, 0xf5,
	0x16, 0xd9, 0xf4, 0x15, 0xfa, 0x2c, 0x5d, 0x66, 0xd9, 0x5d, 0x0b, 0xfb, 0x45, 0x8a, 0xb9, 0x70,
	0x38, 0x92, 0x42, 0xb7, 0x1b, 0x7b, 0xce, 0x9c, 0x73, 0xbe, 0x99, 0x73, 0x99, 0x43, 0x81, 0x97,
	0x73, 0x92, 0x86, 0x24, 0xed, 0xcf, 0xbd, 0x88, 0x44, 0xfe, 0xdc, 0x0b, 0xce, 0xe2, 0x84, 0x50,
	0x72, 0x7e, 0xf6, 0x53, 0x4a, 0xa2, 0x3e, 0xc5, 0x29, 0xb5, 0xf9, 0x06, 0x6c, 0x08, 0x43, 0x3b,
	0xf4, 0xfc, 0xa8, 0x7b, 0xb4, 0x24, 0x4b, 0xc2, 0xf7, 0xfb, 0x6c, 0x25, 0x4c, 0xba, 0xcf, 0x96,
	0x84, 0x2c, 0x03, 0xdc, 0xe7, 0xd2, 0x2c, 0xbb, 0xe9, 0x7b, 0xd1, 0x4a, 0xaa, 0x7a, 0x9b, 0xaa,
	0x45, 0x96, 0x78, 0xd4, 0x27, 0x91, 0xd4, 0x9f, 0x6c, 0xea, 0x71, 0x18, 0xd3, 0xdc, 0xd9, 0xdc,
	0x54, 0xde, 0xf8, 0x38, 0x58, 0x4c, 0x43, 0x2f, 0xbd, 0x95, 0x16, 0xcf, 0x37, 0x2d, 0x52, 0x9a,
	0x64, 0x73, 0x79, 0xf5, 0xee, 0xe9, 0xa6, 0x96, 0xfa, 0x21, 0x4e, 0xa9, 0x17, 0xc6, 0x65, 0xb7,
	0xfb, 0x25, 0xf1, 0xe2, 0x18, 0x27, 0xa9, 0xd0, 0xbf, 0xb8, 0x06, 0xb5, 0x89, 0x1f, 0xe2, 0x09,
	0x4e, 0x29, 0xfc, 0x0a, 0xb4, 0x59, 0x56, 0xa6, 0x8a, 0x81, 0x0c, 0xd3, 0xb0, 0x1a, 0x4e, 0xd7,
	0x16, 0x10, 0x3b, 0x87, 0xd8, 0x93, 0xdc, 0x62, 0xb4, 0xfb, 0xfe, 0xaf, 0x53, 0xc3, 0x6d, 0x31,
	0x3f, 0xb5, 0xf9, 0xe2, 0xf7, 0x43, 0xd0, 0xfc, 0x82, 0x84, 0x71, 0x80, 0xa9, 0x20, 0x5f, 0x81,
	0x76, 0x94, 0x85, 0x38, 0x61, 0x55, 0x98, 0x32, 0x5b, 0x49, 0x7e, 0x69, 0x6b, 0xa9, 0xb7, 0x75,
	0x17, 0xfb, 0x2a, 0xb7, 0x67, 0x92, 0xdb, 0x8a, 0x74, 0x11, 0x3a, 0xa0, 0xce, 0x6f, 0x8a, 0xa3,
	0x2c, 0x44, 0x15, 0xd3, 0xb0, 0xda, 0xce, 0xf1, 0x1a, 0x6a, 0x1c, 0x65, 0x21, 0x77, 0xac, 0x31,
	0x3b, 0x26, 0xc1, 0x0b, 0xc0, 0xd7, 0xd3, 0xd0, 0x8b, 0x51, 0xd5, 0xac, 0x5a, 0x0d, 0xe7, 0x93,
	0xf2, 0xd3, 0xd9, 0x9f, 0xb7, 0x5e, 0x3c, 0x8e, 0x68, 0xb2, 0x72, 0x0f, 0xa8, 0x90, 0xe0, 0x15,
	0x68, 0xa9, 0x04, 0x71, 0xce, 0x2e, 0xe7, 0xbc, 0x7a, 0x98, 0xc3, 0xf2, 0xa2, 0x58, 0x0d, 0x5a,
	0xec, 0x40, 0x07, 0x1c, 0x73, 0x5e, 0x82, 0x63, 0xec, 0x51, 0xbc, 0x98, 0xde, 0xf8, 0xbf, 0xe2,
	0xc5, 0xb9, 0x83, 0xf6, 0xcc, 0xaa, 0x75, 0xe0, 0x3e, 0x66, 0x4a, 0x57, 0xea, 0x2e, 0x85, 0x0a,
	0x9e, 0xc8, 0xd0, 0x67, 0x84, 0x04, 0x68, 0xdf, 0x34, 0xac, 0x9a, 0x88, 0x71, 0x44, 0x48, 0x00,
	0x4f, 0x01, 0xe7, 0x4f, 0x53, 0x9a, 0xf8, 0xd1, 0x12, 0x1d, 0x98, 0x86, 0x55, 0x77, 0x01, 0xdb,
	0xba, 0xe6, 0x3b, 0xf0, 0x7f, 0x00, 0x08, 0xef, 0x15, 0xc5, 0x29, 0xaa, 0x99, 0x86, 0xd5, 0x74,
	0x39, 0x6f, 0xc4, 0x36, 0x60, 0x5f, 0xe6, 0xc8, 0x8b, 0x56, 0xa8, 0xce, 0x2b, 0x74, 0xb4, 0x55,
	0xfb, 0x8b, 0x48, 0x66, 0xe4, 0x22, 0x5a, 0xc1, 0x8b, 0xad, 0x96, 0x01, 0xff, 0xd6, 0x32, 0x1b,
	0xcd, 0x02, 0xaf, 0x00, 0x94, 0x77, 0x5e, 0x68, 0x98, 0xc6, 0x7f, 0xec, 0xbc, 0x8e, 0x08, 0x6e,
	0x51, 0xf0, 0x3e, 0x97, 0x45, 0xca, 0x9f, 0x21, 0x6a, 0x72, 0xd4, 0xb3, 0x2d, 0xd4, 0x97, 0xd2,
	0xc0, 0x6d, 0x32, 0xfb, 0x5c, 0x82, 0xaf, 0x8b, 0x1c, 0x66, 0x73, 0x8a, 0x5a, 0xdc, 0xfb, 0xe9,
	0x96, 0xf7, 0x35, 0x57, 0xab, 0xe4, 0x66, 0x73, 0x0a, 0x47, 0xe0, 0x50, 0x95, 0x66, 0xfa, 0xb3,
	0x17, 0x64, 0x18, 0xb5, 0x4b, 0xc2, 0x60, 0xd5, 0xfa, 0x8e, 0x59, 0x88, 0x6c, 0x28, 0x11, 0x8e,
	0x41, 0xa7, 0x28, 0x90, 0x84, 0x1c, 0x72, 0xc8, 0xc9, 0x36, 0x84, 0xd9, 0x08, 0x4a, 0x5b, 0xd5,
	0x50, 0x60, 0xbe, 0x06, 0x8f, 0x44, 0x12, 0x48, 0x36, 0x0b, 0xb0, 0xe4, 0x74, 0x38, 0xe7, 0xf9,
	0x76, 0x22, 0xb8, 0x91, 0x00, 0xf1, 0x08, 0xb4, 0x0d, 0x75, 0xa1, 0x9b, 0x80, 0x78, 0x54, 0x82,
	0x1e, 0x95, 0x5c, 0xe8, 0x92, 0xd9, 0x68, 0x17, 0x2a, 0x64, 0x85, 0xf1, 0x23, 0x7a, 0xee, 0x48,
	0x0c, 0x2c, 0xc1, 0x7c, 0xc3, 0x6c, 0x34, 0x4c, 0x21, 0xeb, 0x98, 0xe1, 0x40, 0x62, 0x1e, 0x97,
	0x63, 0x86, 0x83, 0x75, 0x8c, 0x94, 0x55, 0x7a, 0xc4, 0x3b, 0x91, 0x9c, 0xa3, 0x92, 0xf4, 0x88,
	0xa7, 0xa3, 0xa5, 0x47, 0xdb, 0x50, 0xa4, 0x4c, 0x0f, 0xec, 0xb8, 0x84, 0xf4, 0x4e, 0x8b, 0x8c,
	0x93, 0xde, 0xf9, 0x45, 0x68, 0x3a, 0x49, 0xc5, 0xf6, 0xe4, 0x01, 0x52, 0x1e, 0x9c, 0x22, 0xe5,
	0xd1, 0xe5, 0x7d, 0x58, 0x7c, 0x4b, 0xd0, 0xd3, 0x92, 0x3e, 0xbc, 0x64, 0x26, 0x6f, 0xbd, 0xf4,
	0x56, 0xf4, 0xa1, 0x12, 0xe1, 0x67, 0x72, 0x50, 0xf0, 0x8f, 0x15, 0x42, 0xdc, 0xfd, 0xc9, 0x96,
	0xfb, 0x98, 0x69, 0xc5, 0x00, 0xe1, 0xcb, 0xee, 0x1b, 0xd0, 0xd4, 0x47, 0x27, 0xec, 0x80, 0xea,
	0x2d, 0x5e, 0xf1, 0x69, 0xbf, 0xe7, 0xb2, 0x25, 0x3c, 0x02, 0x7b, 0x22, 0x34, 0x36, 0xb6, 0xab,
	0xae, 0x10, 0xde, 0x54, 0x5e, 0x1b, 0xdd, 0xef, 0x41, 0x67, 0x73, 0x5c, 0x7e, 0xc4, 0xbf, 0xaf,
	0xfb, 0x3f, 0xf8, 0xac, 0x35, 0xf4, 0x6f, 0x15, 0xd0, 0x5a, 0xfb, 0xa0, 0xa8, 0x41, 0xc8, 0x0b,
	0x20, 0xf9, 0x75, 0xd5, 0x6c, 0xf0, 0xff, 0xa0, 0x29, 0x53, 0x28, 0x06, 0x32, 0x3b, 0xec, 0x40,
	0x0c, 0xef, 0x7c, 0x10, 0xe7, 0xb3, 0x56, 0x54, 0x1e, 0x55, 0x4d, 0xc3, 0x6a, 0x89, 0x71, 0x20,
	0xaa, 0xaa, 0x1f, 0x31, 0x1c, 0xa0, 0x5d, 0x1e, 0x6e, 0x5d, 0x35, 0xe2, 0xfa, 0x11, 0xc3, 0x01,
	0xda, 0x33, 0x0d, 0x6b, 0x5f, 0x3b, 0x62, 0x38, 0x58, 0x3b, 0x62, 0x38, 0xe0, 0xd3, 0x7e, 0xb7,
	0x38, 0x62, 0x38, 0x50, 0x47, 0xf0, 0xc7, 0xc9, 0xc7, 0x7d, 0x45, 0x1c, 0xc1, 0x5f, 0x9e, 0xf2,
	0x17, 0x53, 0x80, 0x8f, 0x7b, 0x43, 0xf8, 0x8b, 0x17, 0xfe, 0xca, 0x06, 0xb5, 0xfc, 0x4b, 0x09,
	0x01, 0xd8, 0x9f, 0x8c, 0xaf, 0x27, 0xd3, 0x4f, 0x3b, 0x3b, 0x6a, 0xed, 0x74, 0x0c, 0xb5, 0x3e,
	0xef, 0x54, 0x46, 0xdf, 0xfe, 0x71, 0xd7, 0x33, 0x3e, 0xdc, 0xf5, 0x8c, 0xbf, 0xef, 0x7a, 0xc6,
	0xfb, 0xfb, 0xde, 0xce, 0x87, 0xfb, 0xde, 0xce, 0x9f, 0xf7, 0xbd, 0x9d, 0x1f, 0x9c, 0xa5, 0x4f,
	0x7f, 0xcc, 0x66, 0xf6, 0x9c, 0x84, 0xfd, 0xfc, 0x77, 0x17, 0xff, 0x77, 0x96, 0x2e, 0x6e, 0x3f,
	0xfe, 0x13, 0x6c, 0xb6, 0x2f, 0x84, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xea, 0x78, 0xd8, 0x3e,
	0xa9, 0x09, 0x00, 0x00,
}

func (m *TimeTest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeTest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeTest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TestTimestamp != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.TestTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.TestTimestamp):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintTest(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompleteTest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompleteTest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompleteTest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TestEmpty != nil {
		{
			size, err := m.TestEmpty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.TestFieldMask != nil {
		{
			size, err := m.TestFieldMask.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.TestUint64Value != nil {
		{
			size, err := m.TestUint64Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.TestUint32Value != nil {
		{
			size, err := m.TestUint32Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.TestStringValue != nil {
		{
			size, err := m.TestStringValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.TestInt64Value != nil {
		{
			size, err := m.TestInt64Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.TestInt32Value != nil {
		{
			size, err := m.TestInt32Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.TestFloatValue != nil {
		{
			size, err := m.TestFloatValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.TestDoubleValue != nil {
		{
			size, err := m.TestDoubleValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.TestBytesValue != nil {
		{
			size, err := m.TestBytesValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.TestBoolValue != nil {
		{
			size, err := m.TestBoolValue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.TestStruct != nil {
		{
			size, err := m.TestStruct.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.TestDuration != nil {
		{
			size, err := m.TestDuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.TestStdTimestamp != nil {
		n15, err15 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.TestStdTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.TestStdTimestamp):])
		if err15 != nil {
			return 0, err15
		}
		i -= n15
		i = encodeVarintTest(dAtA, i, uint64(n15))
		i--
		dAtA[i] = 0x5a
	}
	if m.TestTimestamp != nil {
		{
			size, err := m.TestTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.TestAny != nil {
		{
			size, err := m.TestAny.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TestBytes) > 0 {
		i -= len(m.TestBytes)
		copy(dAtA[i:], m.TestBytes)
		i = encodeVarintTest(dAtA, i, uint64(len(m.TestBytes)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TestString) > 0 {
		i -= len(m.TestString)
		copy(dAtA[i:], m.TestString)
		i = encodeVarintTest(dAtA, i, uint64(len(m.TestString)))
		i--
		dAtA[i] = 0x3a
	}
	if m.TestBool {
		i--
		if m.TestBool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.TestRepeatedFixed32) > 0 {
		for iNdEx := len(m.TestRepeatedFixed32) - 1; iNdEx >= 0; iNdEx-- {
			i -= 4
			encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.TestRepeatedFixed32[iNdEx]))
		}
		i = encodeVarintTest(dAtA, i, uint64(len(m.TestRepeatedFixed32)*4))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TestTimeMap) > 0 {
		for k := range m.TestTimeMap {
			v := m.TestTimeMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTest(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintTest(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTest(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TestMap) > 0 {
		for k := range m.TestMap {
			v := m.TestMap[k]
			baseI := i
			i = encodeVarintTest(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintTest(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTest(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TestEnum != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.TestEnum))
		i--
		dAtA[i] = 0x10
	}
	if m.NumericalTest != nil {
		{
			size, err := m.NumericalTest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTest(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CompleteTest_NumericalTest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompleteTest_NumericalTest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompleteTest_NumericalTest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TestDouble != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TestDouble))))
		i--
		dAtA[i] = 0x41
	}
	if m.TestFloat != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TestFloat))))
		i--
		dAtA[i] = 0x3d
	}
	if m.TestUint64 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.TestUint64))
		i--
		dAtA[i] = 0x30
	}
	if m.TestFixed64 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.TestFixed64))
		i--
		dAtA[i] = 0x29
	}
	if m.TestInt64 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.TestInt64))
		i--
		dAtA[i] = 0x20
	}
	if m.TestUint32 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.TestUint32))
		i--
		dAtA[i] = 0x18
	}
	if m.TestFixed32 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.TestFixed32))
		i--
		dAtA[i] = 0x15
	}
	if m.TestInt32 != 0 {
		i = encodeVarintTest(dAtA, i, uint64(m.TestInt32))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTest(dAtA []byte, offset int, v uint64) int {
	offset -= sovTest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TimeTest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TestTimestamp != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.TestTimestamp)
		n += 1 + l + sovTest(uint64(l))
	}
	return n
}

func (m *CompleteTest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumericalTest != nil {
		l = m.NumericalTest.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.TestEnum != 0 {
		n += 1 + sovTest(uint64(m.TestEnum))
	}
	if len(m.TestMap) > 0 {
		for k, v := range m.TestMap {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTest(uint64(k)) + 1 + sovTest(uint64(v))
			n += mapEntrySize + 1 + sovTest(uint64(mapEntrySize))
		}
	}
	if len(m.TestTimeMap) > 0 {
		for k, v := range m.TestTimeMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTest(uint64(l))
			}
			mapEntrySize := 1 + sovTest(uint64(k)) + l
			n += mapEntrySize + 1 + sovTest(uint64(mapEntrySize))
		}
	}
	if len(m.TestRepeatedFixed32) > 0 {
		n += 1 + sovTest(uint64(len(m.TestRepeatedFixed32)*4)) + len(m.TestRepeatedFixed32)*4
	}
	if m.TestBool {
		n += 2
	}
	l = len(m.TestString)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	l = len(m.TestBytes)
	if l > 0 {
		n += 1 + l + sovTest(uint64(l))
	}
	if m.TestAny != nil {
		l = m.TestAny.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.TestTimestamp != nil {
		l = m.TestTimestamp.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.TestStdTimestamp != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.TestStdTimestamp)
		n += 1 + l + sovTest(uint64(l))
	}
	if m.TestDuration != nil {
		l = m.TestDuration.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.TestStruct != nil {
		l = m.TestStruct.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.TestBoolValue != nil {
		l = m.TestBoolValue.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.TestBytesValue != nil {
		l = m.TestBytesValue.Size()
		n += 1 + l + sovTest(uint64(l))
	}
	if m.TestDoubleValue != nil {
		l = m.TestDoubleValue.Size()
		n += 2 + l + sovTest(uint64(l))
	}
	if m.TestFloatValue != nil {
		l = m.TestFloatValue.Size()
		n += 2 + l + sovTest(uint64(l))
	}
	if m.TestInt32Value != nil {
		l = m.TestInt32Value.Size()
		n += 2 + l + sovTest(uint64(l))
	}
	if m.TestInt64Value != nil {
		l = m.TestInt64Value.Size()
		n += 2 + l + sovTest(uint64(l))
	}
	if m.TestStringValue != nil {
		l = m.TestStringValue.Size()
		n += 2 + l + sovTest(uint64(l))
	}
	if m.TestUint32Value != nil {
		l = m.TestUint32Value.Size()
		n += 2 + l + sovTest(uint64(l))
	}
	if m.TestUint64Value != nil {
		l = m.TestUint64Value.Size()
		n += 2 + l + sovTest(uint64(l))
	}
	if m.TestFieldMask != nil {
		l = m.TestFieldMask.Size()
		n += 2 + l + sovTest(uint64(l))
	}
	if m.TestEmpty != nil {
		l = m.TestEmpty.Size()
		n += 2 + l + sovTest(uint64(l))
	}
	return n
}

func (m *CompleteTest_NumericalTest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TestInt32 != 0 {
		n += 1 + sovTest(uint64(m.TestInt32))
	}
	if m.TestFixed32 != 0 {
		n += 5
	}
	if m.TestUint32 != 0 {
		n += 1 + sovTest(uint64(m.TestUint32))
	}
	if m.TestInt64 != 0 {
		n += 1 + sovTest(uint64(m.TestInt64))
	}
	if m.TestFixed64 != 0 {
		n += 9
	}
	if m.TestUint64 != 0 {
		n += 1 + sovTest(uint64(m.TestUint64))
	}
	if m.TestFloat != 0 {
		n += 5
	}
	if m.TestDouble != 0 {
		n += 9
	}
	return n
}

func sovTest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTest(x uint64) (n int) {
	return sovTest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TimeTest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeTest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeTest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestTimestamp == nil {
				m.TestTimestamp = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.TestTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompleteTest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompleteTest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompleteTest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumericalTest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NumericalTest == nil {
				m.NumericalTest = &CompleteTest_NumericalTest{}
			}
			if err := m.NumericalTest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestEnum", wireType)
			}
			m.TestEnum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TestEnum |= EnumTest(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestMap == nil {
				m.TestMap = make(map[int32]int64)
			}
			var mapkey int32
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TestMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestTimeMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestTimeMap == nil {
				m.TestTimeMap = make(map[int32]*types.Duration)
			}
			var mapkey int32
			var mapvalue *types.Duration
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTest
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTest
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.Duration{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TestTimeMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType == 5 {
				var v uint32
				if (iNdEx + 4) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
				iNdEx += 4
				m.TestRepeatedFixed32 = append(m.TestRepeatedFixed32, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 4
				if elementCount != 0 && len(m.TestRepeatedFixed32) == 0 {
					m.TestRepeatedFixed32 = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					if (iNdEx + 4) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
					iNdEx += 4
					m.TestRepeatedFixed32 = append(m.TestRepeatedFixed32, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TestRepeatedFixed32", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestBool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TestBool = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TestBytes = append(m.TestBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.TestBytes == nil {
				m.TestBytes = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestAny", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestAny == nil {
				m.TestAny = &types1.Any{}
			}
			if err := m.TestAny.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestTimestamp == nil {
				m.TestTimestamp = &types.Timestamp{}
			}
			if err := m.TestTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestStdTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestStdTimestamp == nil {
				m.TestStdTimestamp = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.TestStdTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestDuration == nil {
				m.TestDuration = &types.Duration{}
			}
			if err := m.TestDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestStruct", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestStruct == nil {
				m.TestStruct = &types.Struct{}
			}
			if err := m.TestStruct.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestBoolValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestBoolValue == nil {
				m.TestBoolValue = &types.BoolValue{}
			}
			if err := m.TestBoolValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestBytesValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestBytesValue == nil {
				m.TestBytesValue = &types.BytesValue{}
			}
			if err := m.TestBytesValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestDoubleValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestDoubleValue == nil {
				m.TestDoubleValue = &types.DoubleValue{}
			}
			if err := m.TestDoubleValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestFloatValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestFloatValue == nil {
				m.TestFloatValue = &types.FloatValue{}
			}
			if err := m.TestFloatValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestInt32Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestInt32Value == nil {
				m.TestInt32Value = &types.Int32Value{}
			}
			if err := m.TestInt32Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestInt64Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestInt64Value == nil {
				m.TestInt64Value = &types.Int64Value{}
			}
			if err := m.TestInt64Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestStringValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestStringValue == nil {
				m.TestStringValue = &types.StringValue{}
			}
			if err := m.TestStringValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestUint32Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestUint32Value == nil {
				m.TestUint32Value = &types.UInt32Value{}
			}
			if err := m.TestUint32Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestUint64Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestUint64Value == nil {
				m.TestUint64Value = &types.UInt64Value{}
			}
			if err := m.TestUint64Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestFieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestFieldMask == nil {
				m.TestFieldMask = &types.FieldMask{}
			}
			if err := m.TestFieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestEmpty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestEmpty == nil {
				m.TestEmpty = &types.Empty{}
			}
			if err := m.TestEmpty.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompleteTest_NumericalTest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NumericalTest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NumericalTest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestInt32", wireType)
			}
			m.TestInt32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TestInt32 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestFixed32", wireType)
			}
			m.TestFixed32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.TestFixed32 = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestUint32", wireType)
			}
			m.TestUint32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TestUint32 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestInt64", wireType)
			}
			m.TestInt64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TestInt64 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestFixed64", wireType)
			}
			m.TestFixed64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.TestFixed64 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestUint64", wireType)
			}
			m.TestUint64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TestUint64 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestFloat", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TestFloat = float32(math.Float32frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestDouble", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TestDouble = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTest = fmt.Errorf("proto: unexpected end of group")
)
