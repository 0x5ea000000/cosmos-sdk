// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/core/app_config/v1/app_config.proto

package app_config

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AppConfig struct {
	Modules map[string]*types.Any `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Abci    *ABCIHandlers         `protobuf:"bytes,2,opt,name=abci,proto3" json:"abci,omitempty"`
}

func (m *AppConfig) Reset()         { *m = AppConfig{} }
func (m *AppConfig) String() string { return proto.CompactTextString(m) }
func (*AppConfig) ProtoMessage()    {}
func (*AppConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_67d11620ac2d3428, []int{0}
}
func (m *AppConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppConfig.Merge(m, src)
}
func (m *AppConfig) XXX_Size() int {
	return m.Size()
}
func (m *AppConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AppConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AppConfig proto.InternalMessageInfo

func (m *AppConfig) GetModules() map[string]*types.Any {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *AppConfig) GetAbci() *ABCIHandlers {
	if m != nil {
		return m.Abci
	}
	return nil
}

type ABCIHandlers struct {
	InitGenesis []string `protobuf:"bytes,1,rep,name=init_genesis,json=initGenesis,proto3" json:"init_genesis,omitempty"`
	BeginBlock  []string `protobuf:"bytes,2,rep,name=begin_block,json=beginBlock,proto3" json:"begin_block,omitempty"`
	EndBlock    []string `protobuf:"bytes,3,rep,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
	TxHandler   string   `protobuf:"bytes,4,opt,name=tx_handler,json=txHandler,proto3" json:"tx_handler,omitempty"`
	InfoHandler string   `protobuf:"bytes,5,opt,name=info_handler,json=infoHandler,proto3" json:"info_handler,omitempty"`
}

func (m *ABCIHandlers) Reset()         { *m = ABCIHandlers{} }
func (m *ABCIHandlers) String() string { return proto.CompactTextString(m) }
func (*ABCIHandlers) ProtoMessage()    {}
func (*ABCIHandlers) Descriptor() ([]byte, []int) {
	return fileDescriptor_67d11620ac2d3428, []int{1}
}
func (m *ABCIHandlers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ABCIHandlers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ABCIHandlers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ABCIHandlers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ABCIHandlers.Merge(m, src)
}
func (m *ABCIHandlers) XXX_Size() int {
	return m.Size()
}
func (m *ABCIHandlers) XXX_DiscardUnknown() {
	xxx_messageInfo_ABCIHandlers.DiscardUnknown(m)
}

var xxx_messageInfo_ABCIHandlers proto.InternalMessageInfo

func (m *ABCIHandlers) GetInitGenesis() []string {
	if m != nil {
		return m.InitGenesis
	}
	return nil
}

func (m *ABCIHandlers) GetBeginBlock() []string {
	if m != nil {
		return m.BeginBlock
	}
	return nil
}

func (m *ABCIHandlers) GetEndBlock() []string {
	if m != nil {
		return m.EndBlock
	}
	return nil
}

func (m *ABCIHandlers) GetTxHandler() string {
	if m != nil {
		return m.TxHandler
	}
	return ""
}

func (m *ABCIHandlers) GetInfoHandler() string {
	if m != nil {
		return m.InfoHandler
	}
	return ""
}

func init() {
	proto.RegisterType((*AppConfig)(nil), "cosmos.core.app_config.v1.AppConfig")
	proto.RegisterMapType((map[string]*types.Any)(nil), "cosmos.core.app_config.v1.AppConfig.ModulesEntry")
	proto.RegisterType((*ABCIHandlers)(nil), "cosmos.core.app_config.v1.ABCIHandlers")
}

func init() {
	proto.RegisterFile("cosmos/core/app_config/v1/app_config.proto", fileDescriptor_67d11620ac2d3428)
}

var fileDescriptor_67d11620ac2d3428 = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcb, 0x4e, 0xea, 0x40,
	0x1c, 0xc6, 0x19, 0x2e, 0xe7, 0x9c, 0x4e, 0x59, 0x9c, 0x4c, 0xce, 0xa2, 0x70, 0x62, 0x45, 0x36,
	0x12, 0xa2, 0xd3, 0x80, 0x1b, 0xa3, 0x2b, 0x20, 0xde, 0x62, 0x4c, 0x4c, 0x97, 0x6e, 0x9a, 0x5e,
	0x86, 0x32, 0xa1, 0xcc, 0x34, 0xbd, 0x10, 0xfa, 0x16, 0xbe, 0x8a, 0x6f, 0xe1, 0x92, 0xa5, 0x4b,
	0x03, 0x0b, 0x5f, 0xc3, 0x74, 0xa6, 0x90, 0xc6, 0x44, 0x57, 0x6d, 0xbf, 0xef, 0xf7, 0x7d, 0xff,
	0xf9, 0x37, 0x03, 0xfb, 0x2e, 0x8f, 0x17, 0x3c, 0x36, 0x5c, 0x1e, 0x11, 0xc3, 0x0e, 0x43, 0xcb,
	0xe5, 0x6c, 0x4a, 0x7d, 0x63, 0x39, 0x28, 0x7d, 0xe1, 0x30, 0xe2, 0x09, 0x47, 0x2d, 0xc9, 0xe2,
	0x9c, 0xc5, 0x25, 0x77, 0x39, 0x68, 0xb7, 0x7c, 0xce, 0xfd, 0x80, 0x18, 0x02, 0x74, 0xd2, 0xa9,
	0x61, 0xb3, 0x4c, 0xa6, 0xba, 0x1f, 0x00, 0x2a, 0xa3, 0x30, 0x9c, 0x08, 0x16, 0xdd, 0xc3, 0xdf,
	0x0b, 0xee, 0xa5, 0x01, 0x89, 0x35, 0xd0, 0xa9, 0xf5, 0xd4, 0xe1, 0x00, 0x7f, 0xdb, 0x8a, 0xf7,
	0x31, 0xfc, 0x20, 0x33, 0x57, 0x2c, 0x89, 0x32, 0x73, 0xd7, 0x80, 0x2e, 0x61, 0xdd, 0x76, 0x5c,
	0xaa, 0x55, 0x3b, 0xa0, 0xa7, 0x0e, 0x8f, 0x7f, 0x6a, 0x1a, 0x4f, 0xee, 0x6e, 0x6d, 0xe6, 0x05,
	0x24, 0x8a, 0x4d, 0x11, 0x6a, 0x3f, 0xc2, 0x66, 0xb9, 0x15, 0xfd, 0x85, 0xb5, 0x39, 0xc9, 0x34,
	0xd0, 0x01, 0x3d, 0xc5, 0xcc, 0x5f, 0x51, 0x1f, 0x36, 0x96, 0x76, 0x90, 0x92, 0xa2, 0xff, 0x1f,
	0x96, 0x4b, 0xe2, 0xdd, 0x92, 0x78, 0xc4, 0x32, 0x53, 0x22, 0x17, 0xd5, 0x73, 0xd0, 0x7d, 0x01,
	0xb0, 0x59, 0x1e, 0x84, 0x8e, 0x60, 0x93, 0x32, 0x9a, 0x58, 0x3e, 0x61, 0x24, 0xa6, 0x72, 0x63,
	0xc5, 0x54, 0x73, 0xed, 0x46, 0x4a, 0xe8, 0x10, 0xaa, 0x0e, 0xf1, 0x29, 0xb3, 0x9c, 0x80, 0xbb,
	0x73, 0xad, 0x2a, 0x08, 0x28, 0xa4, 0x71, 0xae, 0xa0, 0xff, 0x50, 0x21, 0xcc, 0x2b, 0xec, 0x9a,
	0xb0, 0xff, 0x10, 0xe6, 0x49, 0xf3, 0x00, 0xc2, 0x64, 0x65, 0xcd, 0xe4, 0x3c, 0xad, 0x2e, 0x8e,
	0xae, 0x24, 0xab, 0xe2, 0x00, 0x72, 0xfe, 0x94, 0xef, 0x81, 0x86, 0x00, 0xd4, 0x5c, 0x2b, 0x90,
	0xf1, 0xf5, 0xeb, 0x46, 0x07, 0xeb, 0x8d, 0x0e, 0xde, 0x37, 0x3a, 0x78, 0xde, 0xea, 0x95, 0xf5,
	0x56, 0xaf, 0xbc, 0x6d, 0xf5, 0xca, 0xd3, 0x89, 0x4f, 0x93, 0x59, 0xea, 0x60, 0x97, 0x2f, 0x8c,
	0xfd, 0x25, 0xc9, 0x1f, 0xa7, 0xb1, 0x37, 0xff, 0x7a, 0x5f, 0x9c, 0x5f, 0xe2, 0xa7, 0x9c, 0x7d,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x86, 0x7e, 0x44, 0xf1, 0x50, 0x02, 0x00, 0x00,
}

func (m *AppConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Abci != nil {
		{
			size, err := m.Abci.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAppConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Modules) > 0 {
		for k := range m.Modules {
			v := m.Modules[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintAppConfig(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAppConfig(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAppConfig(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ABCIHandlers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ABCIHandlers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ABCIHandlers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InfoHandler) > 0 {
		i -= len(m.InfoHandler)
		copy(dAtA[i:], m.InfoHandler)
		i = encodeVarintAppConfig(dAtA, i, uint64(len(m.InfoHandler)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TxHandler) > 0 {
		i -= len(m.TxHandler)
		copy(dAtA[i:], m.TxHandler)
		i = encodeVarintAppConfig(dAtA, i, uint64(len(m.TxHandler)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EndBlock) > 0 {
		for iNdEx := len(m.EndBlock) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EndBlock[iNdEx])
			copy(dAtA[i:], m.EndBlock[iNdEx])
			i = encodeVarintAppConfig(dAtA, i, uint64(len(m.EndBlock[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BeginBlock) > 0 {
		for iNdEx := len(m.BeginBlock) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BeginBlock[iNdEx])
			copy(dAtA[i:], m.BeginBlock[iNdEx])
			i = encodeVarintAppConfig(dAtA, i, uint64(len(m.BeginBlock[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.InitGenesis) > 0 {
		for iNdEx := len(m.InitGenesis) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.InitGenesis[iNdEx])
			copy(dAtA[i:], m.InitGenesis[iNdEx])
			i = encodeVarintAppConfig(dAtA, i, uint64(len(m.InitGenesis[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAppConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovAppConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AppConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Modules) > 0 {
		for k, v := range m.Modules {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAppConfig(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovAppConfig(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAppConfig(uint64(mapEntrySize))
		}
	}
	if m.Abci != nil {
		l = m.Abci.Size()
		n += 1 + l + sovAppConfig(uint64(l))
	}
	return n
}

func (m *ABCIHandlers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InitGenesis) > 0 {
		for _, s := range m.InitGenesis {
			l = len(s)
			n += 1 + l + sovAppConfig(uint64(l))
		}
	}
	if len(m.BeginBlock) > 0 {
		for _, s := range m.BeginBlock {
			l = len(s)
			n += 1 + l + sovAppConfig(uint64(l))
		}
	}
	if len(m.EndBlock) > 0 {
		for _, s := range m.EndBlock {
			l = len(s)
			n += 1 + l + sovAppConfig(uint64(l))
		}
	}
	l = len(m.TxHandler)
	if l > 0 {
		n += 1 + l + sovAppConfig(uint64(l))
	}
	l = len(m.InfoHandler)
	if l > 0 {
		n += 1 + l + sovAppConfig(uint64(l))
	}
	return n
}

func sovAppConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAppConfig(x uint64) (n int) {
	return sovAppConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAppConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Modules == nil {
				m.Modules = make(map[string]*types.Any)
			}
			var mapkey string
			var mapvalue *types.Any
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAppConfig
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAppConfig
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAppConfig
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAppConfig
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &types.Any{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAppConfig(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAppConfig
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Modules[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Abci", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAppConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Abci == nil {
				m.Abci = &ABCIHandlers{}
			}
			if err := m.Abci.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAppConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ABCIHandlers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ABCIHandlers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ABCIHandlers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitGenesis", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitGenesis = append(m.InitGenesis, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginBlock = append(m.BeginBlock, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndBlock = append(m.EndBlock, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHandler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHandler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoHandler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAppConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InfoHandler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAppConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAppConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAppConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAppConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAppConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAppConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAppConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAppConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAppConfig = fmt.Errorf("proto: unexpected end of group")
)
