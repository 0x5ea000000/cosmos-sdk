// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/core/app_config/v1/default_middleware.proto

package app_config

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DefaultTxMiddleware struct {
	MaxMemoCharacters      uint64   `protobuf:"varint,1,opt,name=max_memo_characters,json=maxMemoCharacters,proto3" json:"max_memo_characters,omitempty"`
	TxSizeCostPerByte      uint64   `protobuf:"varint,2,opt,name=tx_size_cost_per_byte,json=txSizeCostPerByte,proto3" json:"tx_size_cost_per_byte,omitempty"`
	TxSigLimit             uint64   `protobuf:"varint,3,opt,name=tx_sig_limit,json=txSigLimit,proto3" json:"tx_sig_limit,omitempty"`
	SigVerifyCostEd25519   uint64   `protobuf:"varint,4,opt,name=sig_verify_cost_ed25519,json=sigVerifyCostEd25519,proto3" json:"sig_verify_cost_ed25519,omitempty"`
	SigVerifyCostSecp256K1 uint64   `protobuf:"varint,5,opt,name=sig_verify_cost_secp256k1,json=sigVerifyCostSecp256k1,proto3" json:"sig_verify_cost_secp256k1,omitempty"`
	AllowedPubKeyTypes     []string `protobuf:"bytes,6,rep,name=allowed_pub_key_types,json=allowedPubKeyTypes,proto3" json:"allowed_pub_key_types,omitempty"`
}

func (m *DefaultTxMiddleware) Reset()         { *m = DefaultTxMiddleware{} }
func (m *DefaultTxMiddleware) String() string { return proto.CompactTextString(m) }
func (*DefaultTxMiddleware) ProtoMessage()    {}
func (*DefaultTxMiddleware) Descriptor() ([]byte, []int) {
	return fileDescriptor_98b7f521c81e3c2e, []int{0}
}
func (m *DefaultTxMiddleware) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DefaultTxMiddleware) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DefaultTxMiddleware.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DefaultTxMiddleware) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefaultTxMiddleware.Merge(m, src)
}
func (m *DefaultTxMiddleware) XXX_Size() int {
	return m.Size()
}
func (m *DefaultTxMiddleware) XXX_DiscardUnknown() {
	xxx_messageInfo_DefaultTxMiddleware.DiscardUnknown(m)
}

var xxx_messageInfo_DefaultTxMiddleware proto.InternalMessageInfo

func (m *DefaultTxMiddleware) GetMaxMemoCharacters() uint64 {
	if m != nil {
		return m.MaxMemoCharacters
	}
	return 0
}

func (m *DefaultTxMiddleware) GetTxSizeCostPerByte() uint64 {
	if m != nil {
		return m.TxSizeCostPerByte
	}
	return 0
}

func (m *DefaultTxMiddleware) GetTxSigLimit() uint64 {
	if m != nil {
		return m.TxSigLimit
	}
	return 0
}

func (m *DefaultTxMiddleware) GetSigVerifyCostEd25519() uint64 {
	if m != nil {
		return m.SigVerifyCostEd25519
	}
	return 0
}

func (m *DefaultTxMiddleware) GetSigVerifyCostSecp256K1() uint64 {
	if m != nil {
		return m.SigVerifyCostSecp256K1
	}
	return 0
}

func (m *DefaultTxMiddleware) GetAllowedPubKeyTypes() []string {
	if m != nil {
		return m.AllowedPubKeyTypes
	}
	return nil
}

func init() {
	proto.RegisterType((*DefaultTxMiddleware)(nil), "cosmos.core.app_config.v1.DefaultTxMiddleware")
}

func init() {
	proto.RegisterFile("cosmos/core/app_config/v1/default_middleware.proto", fileDescriptor_98b7f521c81e3c2e)
}

var fileDescriptor_98b7f521c81e3c2e = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd1, 0x31, 0x8f, 0xda, 0x30,
	0x14, 0xc0, 0x71, 0x02, 0x14, 0xa9, 0x56, 0x97, 0x9a, 0xd2, 0x86, 0x25, 0x42, 0x9d, 0x18, 0xda,
	0xa4, 0xa1, 0x4a, 0x25, 0x56, 0x68, 0xbb, 0xb4, 0x48, 0x08, 0x50, 0x87, 0x2e, 0x96, 0xe3, 0x3c,
	0x82, 0x45, 0x5c, 0x47, 0xb6, 0x03, 0x09, 0x9f, 0xa2, 0x9f, 0xe8, 0xe6, 0x1b, 0x19, 0x6f, 0x3c,
	0xc1, 0x17, 0x39, 0x25, 0xb9, 0xe3, 0x74, 0x4c, 0x96, 0xfc, 0x7f, 0xbf, 0xb7, 0x3c, 0x34, 0x62,
	0x52, 0x0b, 0xa9, 0x3d, 0x26, 0x15, 0x78, 0x34, 0x4d, 0x09, 0x93, 0xff, 0xd6, 0x3c, 0xf6, 0x76,
	0xbe, 0x17, 0xc1, 0x9a, 0x66, 0x89, 0x21, 0x82, 0x47, 0x51, 0x02, 0x7b, 0xaa, 0xc0, 0x4d, 0x95,
	0x34, 0x12, 0xf7, 0x6b, 0xe3, 0x96, 0xc6, 0x7d, 0x36, 0xee, 0xce, 0xff, 0x78, 0xd3, 0x44, 0xdd,
	0xef, 0xb5, 0x5b, 0xe5, 0xb3, 0x0b, 0xc4, 0x2e, 0xea, 0x0a, 0x9a, 0x13, 0x01, 0x42, 0x12, 0xb6,
	0xa1, 0x8a, 0x32, 0x03, 0x4a, 0xdb, 0xd6, 0xc0, 0x1a, 0xb6, 0x17, 0x6f, 0x05, 0xcd, 0x67, 0x20,
	0xe4, 0xf4, 0x12, 0xf0, 0x17, 0xd4, 0x33, 0x39, 0xd1, 0xfc, 0x00, 0x84, 0x49, 0x6d, 0x48, 0x0a,
	0x8a, 0x84, 0x85, 0x01, 0xbb, 0x59, 0x0b, 0x93, 0x2f, 0xf9, 0x01, 0xa6, 0x52, 0x9b, 0x39, 0xa8,
	0x49, 0x61, 0x00, 0x0f, 0xd0, 0x9b, 0x4a, 0xc4, 0x24, 0xe1, 0x82, 0x1b, 0xbb, 0x55, 0x0d, 0xa2,
	0x72, 0x30, 0xfe, 0x5d, 0xfe, 0xe0, 0x00, 0x7d, 0x28, 0xf3, 0x0e, 0x14, 0x5f, 0x17, 0xf5, 0x5a,
	0x88, 0x46, 0x41, 0xe0, 0x8f, 0xed, 0x76, 0x35, 0xfc, 0x4e, 0xf3, 0xf8, 0x4f, 0x55, 0xcb, 0xc5,
	0x3f, 0xea, 0x86, 0xc7, 0xa8, 0x7f, 0xcd, 0x34, 0xb0, 0x74, 0x14, 0x7c, 0xdb, 0xfa, 0xf6, 0xab,
	0x0a, 0xbe, 0x7f, 0x01, 0x97, 0x4f, 0x15, 0xfb, 0xa8, 0x47, 0x93, 0x44, 0xee, 0x21, 0x22, 0x69,
	0x16, 0x92, 0x2d, 0x14, 0xc4, 0x14, 0x29, 0x68, 0xbb, 0x33, 0x68, 0x0d, 0x5f, 0x2f, 0xf0, 0x63,
	0x9c, 0x67, 0xe1, 0x2f, 0x28, 0x56, 0x65, 0x99, 0xfc, 0xbc, 0x3d, 0x39, 0xd6, 0xf1, 0xe4, 0x58,
	0xf7, 0x27, 0xc7, 0xfa, 0x7f, 0x76, 0x1a, 0xc7, 0xb3, 0xd3, 0xb8, 0x3b, 0x3b, 0x8d, 0xbf, 0x9f,
	0x62, 0x6e, 0x36, 0x59, 0xe8, 0x32, 0x29, 0xbc, 0xcb, 0xd1, 0xca, 0xe7, 0xb3, 0x8e, 0xb6, 0xd7,
	0xf7, 0x0b, 0x3b, 0xd5, 0xa9, 0xbe, 0x3e, 0x04, 0x00, 0x00, 0xff, 0xff, 0x45, 0x07, 0x42, 0x80,
	0xe0, 0x01, 0x00, 0x00,
}

func (m *DefaultTxMiddleware) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultTxMiddleware) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DefaultTxMiddleware) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedPubKeyTypes) > 0 {
		for iNdEx := len(m.AllowedPubKeyTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedPubKeyTypes[iNdEx])
			copy(dAtA[i:], m.AllowedPubKeyTypes[iNdEx])
			i = encodeVarintDefaultMiddleware(dAtA, i, uint64(len(m.AllowedPubKeyTypes[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.SigVerifyCostSecp256K1 != 0 {
		i = encodeVarintDefaultMiddleware(dAtA, i, uint64(m.SigVerifyCostSecp256K1))
		i--
		dAtA[i] = 0x28
	}
	if m.SigVerifyCostEd25519 != 0 {
		i = encodeVarintDefaultMiddleware(dAtA, i, uint64(m.SigVerifyCostEd25519))
		i--
		dAtA[i] = 0x20
	}
	if m.TxSigLimit != 0 {
		i = encodeVarintDefaultMiddleware(dAtA, i, uint64(m.TxSigLimit))
		i--
		dAtA[i] = 0x18
	}
	if m.TxSizeCostPerByte != 0 {
		i = encodeVarintDefaultMiddleware(dAtA, i, uint64(m.TxSizeCostPerByte))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxMemoCharacters != 0 {
		i = encodeVarintDefaultMiddleware(dAtA, i, uint64(m.MaxMemoCharacters))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDefaultMiddleware(dAtA []byte, offset int, v uint64) int {
	offset -= sovDefaultMiddleware(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DefaultTxMiddleware) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxMemoCharacters != 0 {
		n += 1 + sovDefaultMiddleware(uint64(m.MaxMemoCharacters))
	}
	if m.TxSizeCostPerByte != 0 {
		n += 1 + sovDefaultMiddleware(uint64(m.TxSizeCostPerByte))
	}
	if m.TxSigLimit != 0 {
		n += 1 + sovDefaultMiddleware(uint64(m.TxSigLimit))
	}
	if m.SigVerifyCostEd25519 != 0 {
		n += 1 + sovDefaultMiddleware(uint64(m.SigVerifyCostEd25519))
	}
	if m.SigVerifyCostSecp256K1 != 0 {
		n += 1 + sovDefaultMiddleware(uint64(m.SigVerifyCostSecp256K1))
	}
	if len(m.AllowedPubKeyTypes) > 0 {
		for _, s := range m.AllowedPubKeyTypes {
			l = len(s)
			n += 1 + l + sovDefaultMiddleware(uint64(l))
		}
	}
	return n
}

func sovDefaultMiddleware(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDefaultMiddleware(x uint64) (n int) {
	return sovDefaultMiddleware(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DefaultTxMiddleware) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDefaultMiddleware
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultTxMiddleware: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultTxMiddleware: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMemoCharacters", wireType)
			}
			m.MaxMemoCharacters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefaultMiddleware
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMemoCharacters |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxSizeCostPerByte", wireType)
			}
			m.TxSizeCostPerByte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefaultMiddleware
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxSizeCostPerByte |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxSigLimit", wireType)
			}
			m.TxSigLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefaultMiddleware
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxSigLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigVerifyCostEd25519", wireType)
			}
			m.SigVerifyCostEd25519 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefaultMiddleware
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigVerifyCostEd25519 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigVerifyCostSecp256K1", wireType)
			}
			m.SigVerifyCostSecp256K1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefaultMiddleware
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigVerifyCostSecp256K1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedPubKeyTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDefaultMiddleware
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDefaultMiddleware
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDefaultMiddleware
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedPubKeyTypes = append(m.AllowedPubKeyTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDefaultMiddleware(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDefaultMiddleware
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDefaultMiddleware(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDefaultMiddleware
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDefaultMiddleware
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDefaultMiddleware
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDefaultMiddleware
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDefaultMiddleware
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDefaultMiddleware
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDefaultMiddleware        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDefaultMiddleware          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDefaultMiddleware = fmt.Errorf("proto: unexpected end of group")
)
