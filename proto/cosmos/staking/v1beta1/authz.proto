syntax = "proto3";
package cosmos.staking.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/cosmos/cosmos-sdk/x/staking/types";


message StakeAuthorization {
  option (cosmos_proto.implements_interface) = "Authorization";

  // max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
  // empty, there is no spend limit and any amount of coins can be delegated.
  cosmos.base.v1beta1.Coin max_tokens = 1 [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  // validators is the oneof that represents either allow_list or deny_list
  oneof validators {
    // allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's account.
    Validators allow_list = 2;
    // deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
    Validators deny_list = 3;
  }
  // Validators defines list of validator addresses.
  message Validators {
    repeated string address = 1;
  }
  // authorization_type defines staking msg-type.
  string authorization_type = 4;  
}

// DelegateAuthorization allows the grantee to delegate tokens to provided set of validators
// on behalf of the granter's account.
message DelegateAuthorization {
  option (cosmos_proto.implements_interface) = "Authorization";
  
  // max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
  // empty, there is no spend limit and any amount of coins can be delegated.
  cosmos.base.v1beta1.Coin max_tokens = 1 [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  // validators is the oneof that represents either allow_list or deny_list
  oneof validators {
    // allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's account.
    Validators allow_list = 2;
    // deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
    Validators deny_list = 3;
  }
  // Validators defines list of validator addresses.
  message Validators {
    repeated string address = 1;
  }
}

// UndelegateAuthorization allows the grantee to un-delegate tokens from provided set of validators
// on behalf of the granter's account.
message UndelegateAuthorization {
  option (cosmos_proto.implements_interface) = "Authorization";

  // max_tokens specifies the maximum amount of tokens can be un-delegate from a validator. If it is
  // empty, there is no spend limit and any amount of coins can be un-delegated.
  cosmos.base.v1beta1.Coin max_tokens = 1 [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];
  // validators is the oneof that represents either allow_list or deny_list
  oneof validators {
    // allow_list specifies list of validator addresses from whom grantee can un-delegate tokens on behalf of granter's account.
    Validators allow_list = 2;
    // deny_list specifies list of validator addresses from whom grantee can not undelegate tokens.
    Validators deny_list = 3;
  }
  // Validators defines list of validator addresses.
  message Validators {
    repeated string address = 1;
  }
}
