syntax = "proto3";
package cosmos.base.reflection.v1beta1;

option go_package = "github.com/cosmos/cosmos-sdk/client/grpc/reflection";

// AppDescriptor describes a cosmos sdk application
// in a way that it's possible for an external client
// to build the required components (codec, address encoding..)
// to query and send transactions to the described application.
message AppDescriptor {
  // Codec describes the codec information regarding interface types and relative implementers
  // it's required to provide type safety during marshalling and unmarshalling of anypb.Any types in a dynamic context.
  Codec codec = 1;
  // Config describes the sdk.Config of the application
  Config config = 2;
  // QueryServices provides a list of the exposed gRPC query services of modules
  repeated QueryService query_services = 3;
  // Messages provides a list of the messages that can be delivered to the application
  repeated Message messages = 4;
}

// Codec describes the application's codec
message Codec {
  // interfaces_descriptors lists the registered interfaces descriptors
  repeated InterfaceDescriptor interfaces_descriptors = 1;
}

// InterfaceDescriptor describes an interface
message InterfaceDescriptor {
  // name is the name of the interface
  string name = 1;
  // interface_implementers describes the interface implementers
  repeated InterfaceImplementer interface_implementers = 2;
}

// InterfaceImplementer describes a type implementing an interface
// NOTE: this is a separate type as in the future it will contain
// information such as the fields implementing the interface
// this will guarantee type safety during marshalling of types
// so that it's impossible to just fill the anypb.Any type with any message
// but just a set of types which the interface implementation supports.
message InterfaceImplementer {
  // full_name defines the concrete type's protobuf full name, package included.
  string full_name = 1;
}

// Config describes the application's sdk.Config
message Config {
  // bech32_acc_address_prefix defines the account address prefix
  string bech32_acc_address_prefix = 1;
  // bech32_acc_pub_prefix defines the prefix of an account's public key
  string bech32_acc_pub_prefix = 2;
  // bech32_val_addr_prefix defines the bech32 prefix of a validator's operator address
  string bech32_val_addr_prefix = 3;
  // bech32_val_pub_prefix defines the bech32 prefix of validator's operator public key
  string bech32_val_pub_prefix = 4;
  // bech32_cons_addr_prefix defines the bech32 prefix of a consensus node address
  string bech32_cons_addr_prefix = 5;
  // bech32_cons_pub_prefix defines the bech32 prefix of a consensus node public key
  string bech32_cons_pub_prefix = 6;
  // purpose is the purpose as defined in SLIP44
  uint32 purpose = 7;
  // coin_type returns the coin type as defined in SLIP44
  uint32 coin_type = 8;
}

// QueryService describes a query service
message QueryService {
  // full_name is the full name of the query service, package included.
  string full_name = 1;
}

// Message describes a cosmos-sdk deliverable message
// it can be of type sdk.Msg or type sdk.ServiceMsg
message Message {
  // message is gonna return either one type of Msg or ServiceMsg
  oneof message {
    // msg is used to describe legacy sdk.Msg
    Msg msg = 1;
    // service_msg is used to describe sdk.ServiceMsg
    ServiceMsg service_msg = 2;
  }
}

// Msg describes an sdk.Msg
message Msg {
  // full_name defines the protobuf full name of the Msg, package included.
  string full_name = 1;
}

// ServiceMsg describes an sdk.ServiceMsg
message ServiceMsg {
  // full_name defines the protobuf full name of the ServiceMsg, package included.
  string full_name = 1;
  // method_name defines the service msg's method name
  string method_name = 2;
}